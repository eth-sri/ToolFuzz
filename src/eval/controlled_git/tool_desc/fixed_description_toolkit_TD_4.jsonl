{"name":"Get_Issues","description":"Get_Issues Tool: This tool retrieves a list of issues from a specified repository. It is designed to return the title and issue number of up to 5 issues from the repository. No input is required to use this tool. Simply invoke the tool to receive the output. The tool will return an empty list if there are no issues in the repository. Usage Example: To get the issues, simply call Get_Issues without any input parameters. Allowed Usage: Ensure no input is given, as the tool does not accept any parameters. The output will include the titles and issue numbers of up to 5 issues, formatted as a JSON array of objects.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and could be misinterpreted.","how_to_avoid":"Use precise language to clearly convey the intended meaning.","description":"No input needed; use an empty string ('') to proceed."}}}
{"name":"Get_Issue","description":"Get_Issue Tool Description: This tool is designed to retrieve information about a specific issue from a database, including the issue's title, body, and comment thread. To use this tool correctly, you must provide the issue number as an integer. The issue number should be a positive whole number, e.g., `42`. Ensure that the input is solely an integer without any additional characters or formatting. This tool does not support input in other formats such as strings, floats, or alphanumeric combinations. Only a single integer value should be provided as input. If the input does not meet these criteria, the tool will not function correctly. For example, to fetch the details of issue number 42, input `42` without quotes or additional text.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on acceptable range or context of the integer.","how_to_avoid":"Specify the context and range for the integer value.","description":"Specify the issue number as a positive integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool is designed to facilitate posting comments on GitHub issues. To use this tool correctly, please adhere to the following input format: \n\n1. Specify the issue number as an integer (e.g., 12345).\n2. Insert two newline characters after the issue number.\n3. Write your comment, ensuring it follows the required formatting guidelines.\n\nExample Input:\n```\n12345\n\nThis is my comment on the issue.\n```\n\nImportant Usage Notes:\n- Ensure the issue number is a valid integer and is followed by exactly two newline characters before your comment.\n- Use this tool sparingly to avoid unnecessary clutter in comment threads.\n- Adhering to this format is crucial for the tool to function properly. Failure to comply may result in unsuccessful comment posting.","fields":{"instructions":{"problems_with_current_description":"Vague guidance without specifying exact format requirements.","how_to_avoid":"Specify exact formatting guidelines to eliminate ambiguity.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_open_pull_requests__PRs_","description":"The 'List Open Pull Requests (PRs)' tool provides a list of open pull requests from a specified repository. This tool outputs the title and PR number of up to 5 open pull requests. No input is required from the user, as the tool automatically retrieves this information. To use the tool, simply invoke it without providing any parameters or input. Note that the tool is limited to returning a maximum of 5 pull requests at a time.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity about input expectations and usage context.","how_to_avoid":"Clearly state the absence of required input and provide context.","description":"No input needed; use an empty string if applicable."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR: This tool retrieves the full text of all files in a pull request (PR) using the provided PR number. It is designed to aid in the analysis and contribution to the code changes encapsulated in a PR. To use this tool correctly, follow these guidelines: \n\n1. **Input Type**: The tool requires a single input parameter, the PR number, which must be an integer. For example, if you want to fetch files from PR number 12, input `12`.\n\n2. **Input Constraints**: Ensure that the PR number is a valid integer corresponding to an existing pull request. Non-integer inputs or invalid PR numbers will result in an error.\n\n3. **Usage Example**:\n   - Valid: `12`, `101`, `999`\n   - Invalid: `\"12a\"`, `-1`, `\"PR12\"`\n\n4. **Tool Limitations**: This tool does not handle non-integer inputs, and it cannot fetch files from a PR that does not exist or is inaccessible due to permissions.\n\nBy adhering to these instructions and constraints, you can effectively use this tool to gain insights into the files involved in a pull request.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity regarding the context and purpose of the PR number.","how_to_avoid":"Provide context and specify that the PR number is an identifier for pull requests.","description":"The pull request (PR) identifier as an integer, e.g., `12`."}}}
{"name":"Create_Pull_Request","description":"Create Pull Request Tool: This tool enables you to create a new pull request in a GitHub repository. To ensure successful creation, please adhere to the following format strictly: \n\n1. Start with the title of the pull request. \n2. Add two newline characters after the title. \n3. Provide the body or description of the pull request. \n\nImportant: In the body, reference relevant issues using the syntax `closes #<issue_number>`, such as `closes #3` or `closes #3, closes #6` for multiple issues. \n\nExample: To create a pull request titled 'README updates' with the body 'added contributors' names, closes #3', format it as follows:\n\nREADME updates\n\nadded contributors' names, closes #3\n\nAlways ensure the format is followed precisely to avoid errors in processing your request. Incorrect formatting might lead to failed translations or actions.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity and specificity about the formatting requirements.","how_to_avoid":"Provide detailed guidance on formatting expectations to ensure clarity.","description":"Ensure compliance with specified formatting guidelines."}}}
{"name":"List_Pull_Requests_Files","description":"The List_Pull_Requests_Files tool is designed to retrieve the full text of all files within a specified pull request (PR) on a code repository. To use this tool correctly, you must provide the PR number as an integer input parameter. The PR number should be a positive integer, for example, '12'. This tool is beneficial for reviewing code changes or contributing to the PR by providing a comprehensive overview of all file changes involved. Please ensure that the PR number is correctly formatted as an integer to avoid errors. This tool does not accept string or floating-point inputs. Usage Example: To fetch files from PR number 15, input '15' as the integer parameter.","fields":{"instructions":{"problems_with_current_description":"Ambiguous wording and lack of clarity about what 'PR number' refers to.","how_to_avoid":"Specify what 'PR' stands for and ensure clarity in the context.","description":"The pull request (PR) number as an integer, e.g., `12`."}}}
{"name":"Create_File","description":"Create_File Tool: This tool is a specialized wrapper for the GitHub API designed to create files within a GitHub repository. To use this tool correctly, your input must adhere strictly to the following format and guidelines:\n\n1. **File Path Specification**: Begin by specifying the full path of the file you wish to create. The path should not start with a slash ('/'). Correct Example: 'folder/subfolder/filename.txt'. Incorrect Example: '/folder/subfolder/filename.txt'.\n\n2. **File Content Specification**: After the file path, provide the contents that you want to write into the file. Ensure that the content follows directly after the file path, separated by a newline.\n\nExample of Correct Usage:\nIf you want to create a file named 'test.txt' in the 'test' directory with the content 'test contents', your input should be formatted as follows:\n\n```\ntest/test.txt\ntest contents\n```\n\n**IMPORTANT**: Ensure your input strictly follows this order and formatting to prevent errors in file creation. Deviations from the specified format may result in failure to create the file in the repository.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specific guidance.","how_to_avoid":"Provide clear, concise instructions with specific formatting details.","description":"Ensure adherence to specified format guidelines."}}}
{"name":"Read_File","description":"Read_File Tool: This tool serves as a wrapper for the GitHub API, designed to access and read the contents of a file stored in a GitHub repository. To use this tool correctly, you must provide the full file path relative to the repository root. Important usage guidelines: 1. The file path must not start with a leading slash. 2. The path should be expressed in a format like 'directory/subdirectory/filename.ext'. 3. Ensure the path accurately reflects the structure of the repository. Example of correct usage: 'src/utils/helper.py'. Example of incorrect usage: '/src/utils/helper.py'.","fields":{"instructions":{"problems_with_current_description":"The original description is too verbose and may cause confusion with unnecessary details.","how_to_avoid":"Simplify the description to focus only on the essential information about the file path requirement.","description":"Provide a relative file path (no leading slash), e.g., `some_dir/my_file.py`."}}}
{"name":"Update_File","description":"Update_File Tool: This tool leverages the GitHub API to update the contents of a file in a GitHub repository. To use this tool correctly, follow these instructions strictly:\n\n1. Specify the file you want to modify by providing the full file path, ensuring it does not start with a slash (e.g., 'test/test.txt').\n\n2. Indicate the old content you wish to replace by wrapping it between 'OLD <<<<' and '>>>> OLD'.\n\n3. Specify the new content to replace the old content by wrapping it between 'NEW <<<<' and '>>>> NEW'.\n\nExample: To replace the content of 'test/test.txt' from 'old contents' to 'new contents', format your input as follows:\n\n```\ntest/test.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n```\n\nEnsure your input adheres to these rules to prevent errors and ensure successful updates.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks guidance on how to implement the rules.","how_to_avoid":"Provide specific instructions to ensure clarity and effective rule implementation.","description":"Adhere strictly to specified guidelines without deviation."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool is designed to delete a specified file from a GitHub repository using the GitHub API. Usage instructions: \n1. Input the file path without a leading slash, e.g., 'some_dir/my_file.py'. \n2. Ensure the file path is input as a plain string only, without any additional parameter names or symbols. \n3. Do not include slashes at the beginning of the path. \n4. Example of correct usage: 'some_dir/my_file.py'. \n5. Example of incorrect usage: '/some_dir/my_file.py' or 'path=some_dir/my_file.py'. \nFollow these guidelines to ensure successful execution of the file deletion.","fields":{"instructions":{"problems_with_current_description":"The original description is verbose and includes unnecessary details.","how_to_avoid":"Simplify and focus on the key requirement without examples or redundant phrases.","description":"Enter the file path to delete, without a leading slash."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"The 'Overview_of_existing_files_in_Main_branch' tool is designed to give users a comprehensive overview of all files present in the main branch of the specified repository. It generates a list that includes the file names, their full paths within the repository, and a brief summary of their contents. This tool is especially useful for those who need to familiarize themselves with the structure and content of large codebases. To use this tool, simply execute it without any input parameters; an empty string is sufficient as it requires no additional input. The tool is intended for users who want to quickly understand the organization and contents of the main branch without manually navigating through the entire repository. Note that the tool does not modify any files and is solely for informational purposes.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clarify what 'No input required' means.","how_to_avoid":"Clearly state that the field should remain empty and provide a concise example.","description":"Leave this field empty; input not needed (e.g., '')."}}}
{"name":"List_branches_in_this_repository","description":"List_branches_in_this_repository: This tool retrieves and returns a list of all branch names in the current repository. To use this tool correctly, ensure that you do not provide any input parameters. Simply invoke the tool without any arguments, as it does not require any input to function. Example usage: Call the tool with an empty string or without any parameters. This tool is designed to work only within the context of the current repository, and it does not accept or require any external input.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity.","how_to_avoid":"Specify that no user input is necessary by providing a clear example.","description":"No input needed; use an empty string (\"\") as default."}}}
{"name":"Set_active_branch","description":"Set_active_branch Tool: This tool allows you to set or switch to an active branch in your repository, similar to using `git checkout <branch_name>` for existing branches or `git switch -c <branch_name>` for creating and switching to a new branch. Usage Instructions: 1. Ensure the branch name is provided as a string input. For example, 'my_branch'. 2. If the branch already exists, the tool will switch to that branch, similar to `git checkout <branch_name>`. 3. If the branch does not exist, the tool will create a new branch and switch to it, similar to `git switch -c <branch_name>`. 4. The branch name should follow git naming conventions and should not contain special characters or spaces. 5. Input must be a valid string. Invalid inputs or attempts to create branches with improper names will result in an error. Correct usage ensures smooth branch management in your repository.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity regarding what 'name of the branch' refers to.","how_to_avoid":"Clarify that it refers to the identifier for a version control branch.","description":"Specify the version control branch name, such as 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool creates a new branch in the repository. To use this tool correctly, you must provide the name of the new branch as a single string input parameter. The branch name should conform to standard naming conventions (e.g., `feature/update-readme`). Avoid using spaces, special characters, or uppercase letters. Examples of valid branch names include `my_branch`, `feature/new-feature`, and `bugfix/issue-123`. Incorrect usage includes names with spaces (e.g., `my branch`), special characters (e.g., `my-branch!`), or uppercase letters (e.g., `My_Branch`).","fields":{"instructions":{"problems_with_current_description":"Lacks clarity and context, making it difficult to understand its purpose.","how_to_avoid":"Provide clear context and specify the expected input format.","description":"Specify the branch name, such as 'my_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files located in a specified directory. To use this tool correctly, follow these instructions: \n1. Input the path of the directory as a plain string. Do not include any additional parameters or quotes around the string. \n2. Ensure the path is formatted correctly according to the operating system's directory structure (e.g., 'some_dir/inner_dir' for Linux/Unix or 'some_dir\\inner_dir' for Windows). \n3. The tool does not accept special characters or spaces in the path unless they are correctly escaped. \n4. Examples of correct input: 'some_dir/inner_dir', 'another_dir'. \n5. Examples of incorrect input: {instructions:'some_dir/inner_dir'}, \"some_dir/inner_dir\". \nBy following these guidelines, you can ensure the tool operates as expected.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about the input format and omits important details about the directory path context.","how_to_avoid":"Clarify the directory path input format and specify that no additional parameters should be included.","description":"Enter the directory path as a string, e.g., 'some_dir/inner_dir', without including parameter names."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool allows you to search for issues and pull requests within a repository. To use this tool correctly, you must provide a search query as a string input parameter. The query should be written in natural language, describing the issue title or topic you are searching for. For example, a valid query might be 'bug in authentication system' or 'feature request for dashboard'. Ensure your query is clear and specific to improve the accuracy of the search results. Avoid using ambiguous terms or overly broad topics, and focus on key terms relevant to the issue or pull request you are interested in.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity about its purpose and usage.","how_to_avoid":"Make the description more specific by defining its use and context clearly.","description":"Enter a natural language query, like an issue title or topic."}}}
{"name":"Create_review_request","description":"Create Review Request Tool: This tool is designed to create a review request on an open pull request that matches the current active branch. \n\nUsage Instructions: \n1. Ensure that there is an open pull request associated with the current active branch. \n2. Identify the GitHub username of the person who you want to request a review from. \n3. Use this tool by providing the GitHub username as a string input parameter. \n\nImportant Notes: \n- The 'instructions' parameter is required and must be the exact GitHub username of the reviewer, formatted as a string (e.g., 'my_username'). \n- The tool will not function correctly if the username is missing or incorrect. \n- This tool is intended to facilitate review requests within a GitHub repository setting and should not be used for other purposes. \n\nExamples: \n- Correct Usage: If you want to request a review from the user with the username 'developer123', input 'developer123' as the 'instructions' parameter. \n- Incorrect Usage: Do not input email addresses or any other identifiers as the 'instructions' parameter.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on usage and context.","how_to_avoid":"Specify the field's purpose and input format.","description":"Enter the GitHub username to be queried, e.g., 'my_username'."}}}

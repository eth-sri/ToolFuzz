{"name":"Get_Issues","description":"Get_Issues Tool: This tool is designed to retrieve a list of issues from a specific repository in a version control system. It automatically fetches and returns the title and issue number of up to 5 open issues from the repository. No input is required from the user to execute this tool. To use it correctly, simply activate the tool, and it will provide the information without needing any parameters or instructions. This tool is limited to fetching only the 5 most recent issues and does not accept any filters or additional inputs. Ensure that the repository from which you intend to gather issues is accessible and that you have the necessary permissions to view its issues.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks clarity on what 'No input required' means.","how_to_avoid":"Clarify that the field should be left empty if no input is needed.","description":"Leave blank; no input necessary (e.g., use an empty string '')."}}}
{"name":"Get_Issue","description":"Get_Issue Tool: This tool retrieves detailed information from a specified issue, including the issue's title, body, and entire comment thread. To use this tool correctly, you must provide the issue number as an integer. Input Format: The issue number should be provided as a single integer, without any additional characters or formatting, e.g., `42`. Output: The tool will return a JSON object containing the issue's title, body, and comments. Ensure the issue number is valid and exists in the database to receive the correct output. Improper input, such as non-integer values or missing issue numbers, will result in an error.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and doesn't specify format requirements.","how_to_avoid":"Provide clear format requirements and concise guidance.","description":"Enter the issue number as a whole number, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool is designed for adding comments to a GitHub issue. To use this tool correctly, please follow these instructions precisely: \n\n1. Specify the issue number as an integer at the beginning of your input. \n2. Follow the issue number with two newline characters (press 'Enter' twice). \n3. After the newlines, provide your comment. Your comment must adhere to the required formatting standards. \n\nImportant Usage Guidelines: \n- Ensure that the issue number is a valid integer corresponding to an existing GitHub issue. \n- Use this tool sparingly to maintain the quality and relevance of comment threads. \n- Double-check your comment for formatting and content before submission to avoid errors. \n\nExample Input: \n123\n\nThis is a comment on issue number 123.\n\nBy following these instructions, you can effectively use the Comment_on_Issue tool to contribute to GitHub discussions.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks specific guidance.","how_to_avoid":"Provide clear and specific formatting guidelines.","description":"Adhere to specified format requirements."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool retrieves a list of the most recent 5 open pull requests (PRs) from a repository. For each pull request, it provides the title and PR number. The tool requires no input parameters or additional configuration to operate. Simply activate the tool to receive the information. Ensure the repository context is correctly set for accurate results.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what is expected from the user.","how_to_avoid":"Use precise language to clearly indicate that no input is needed.","description":"No user input required; leave the field empty."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR: This tool retrieves the full text of all files associated with a specific pull request (PR) when provided with the PR number. This can be particularly helpful for reviewing code changes or contributing effectively. **IMPORTANT USAGE INSTRUCTIONS**: \n1. Input the PR number as an integer. It must be a whole number without any additional formatting, such as quotes or decimals. For example, use `12` instead of `'12'` or `12.0`.\n2. Ensure the PR number corresponds to an existing and accessible pull request in the repository you are working with.\n3. Incorrect input formats, such as non-integer values or strings, will result in errors and the tool will not execute as intended.\n4. This tool does not support batch processing or multiple PR numbers at once; only one integer PR number should be provided per request.\nBy adhering to these instructions, you can effectively use this tool to gain insights into pull request changes.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and context.","how_to_avoid":"Provide a clear and concise explanation of the field's purpose.","description":"Integer representing the Pull Request number, e.g., 12."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request: This tool is designed to facilitate the creation of a new pull request in a GitHub repository. To use this tool correctly, adhere strictly to the following input format: \n\n1. Start with the title of the pull request. \n2. Immediately follow the title with two newline characters. \n3. After the newlines, provide the body or description of the pull request. \n\nIn the body, you can reference relevant issues by using the syntax `closes #<issue_number>`, like `closes #3` or `closes #3, closes #6` for multiple issues. \n\nExample: To create a pull request titled 'README updates' with the content 'added contributors' names, closes #3', your input should be: \n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nAlways follow this format to ensure successful input processing.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specific guidance.","how_to_avoid":"Provide clear, concise instructions that specify formatting requirements.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files Tool: This tool is designed to fetch the full text of all files in a specified pull request (PR) by using the PR number as input. It is particularly useful for examining code changes within a PR or contributing to it. **IMPORTANT USAGE INSTRUCTIONS**: \n\n1. Input Requirements: You must provide the PR number as an integer. Example of a valid input: `12`. \n\n2. Allowed Input: Only integer values that correspond to existing PR numbers are allowed. Non-integer inputs or strings will result in an error. \n\n3. Limitations: The tool can only access PRs that exist and are accessible with the current permissions. Ensure that the PR number is correct and that you have the necessary access rights. \n\nBy adhering to these guidelines, you can effectively utilize this tool to retrieve the desired information from a pull request.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what 'PR number' refers to.","how_to_avoid":"Specify that 'PR number' refers to a pull request identifier.","description":"Integer identifier for a pull request, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool: This tool acts as a wrapper for the GitHub API, enabling the creation of files in a GitHub repository. Usage Instructions: 1. Specify the file you wish to create by providing the full file path. NOTE: The file path must NOT start with a slash (e.g., 'folder/filename.txt', not '/folder/filename.txt'). 2. Directly follow the file path with the desired content of the file. Example Usage: To create a file named 'test/test.txt' with the content 'test contents', the input should be formatted as follows: 'test/test.txt\\ntest contents'. Ensure there is no leading slash in the file path, and the content immediately follows the path, separated by a newline. This strict formatting is crucial for the tool to function correctly.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks specific guidance.","how_to_avoid":"Provide clear and concise instructions highlighting the required format.","description":"Ensure compliance with specified format guidelines."}}}
{"name":"Read_File","description":"Read_File Tool: This tool is designed to facilitate reading the contents of a file stored in a GitHub repository via the GitHub API. To use this tool correctly, provide the full file path of the file you wish to read. **IMPORTANT**: The file path must not start with a leading slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. Ensure that the file path is relative to the root of the repository and does not include any leading slashes. This tool is intended for reading text-based content from files, and it will return an error if the file path is incorrectly formatted or if the file does not exist.","fields":{"instructions":{"problems_with_current_description":"The current description might confuse users about the path format and its leading slash restriction.","how_to_avoid":"Clarify the path format and emphasize the restriction on leading slashes.","description":"Specify a relative file path without a leading slash, e.g., `some_dir/my_file.py`."}}}
{"name":"Update_File","description":"Update_File Tool: This tool serves as a wrapper for the GitHub API, enabling you to update the contents of a file in a GitHub repository. **IMPORTANT INSTRUCTIONS**: Your input must strictly adhere to the following format for successful execution: \n\n1. **File Path**: Begin by specifying the path of the file you want to modify. The path should not start with a slash. For example, use 'folder/file.txt'.\n\n2. **Old Contents**: Indicate the text you wish to replace by enclosing it within 'OLD <<<<' and '>>>> OLD'.\n\n3. **New Contents**: Specify the new text to replace the old contents, enclosed within 'NEW <<<<' and '>>>> NEW'.\n\nExample: To change the contents of 'folder/file.txt' from 'old contents' to 'new contents', format your input as follows:\n\nfolder/file.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n\nEnsure that your input strictly follows this format to avoid errors. The tool does not support any other actions or formats.","fields":{"instructions":{"problems_with_current_description":"Lacks specificity and clarity, potentially leading to misinterpretation.","how_to_avoid":"Use concise language that clearly defines expectations and scope.","description":"Adhere exactly to the specified guidelines without deviation."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool is designed to facilitate the deletion of files within a GitHub repository using the GitHub API. To use this tool correctly, you must provide the full file path of the file you wish to delete as a string. It is crucial that this path does not begin with a slash. For example, a valid input would be 'some_dir/my_file.py'. Do not include any parameter names or additional formatting, only a plain string representing the file path. Incorrect usage examples include '/some_dir/my_file.py' (with leading slash) and 'path=some_dir/my_file.py' (including parameter name). Adhering to this format ensures successful file deletion operations.","fields":{"instructions":{"problems_with_current_description":"It's unclear and too verbose, possibly leading to incorrect input formatting.","how_to_avoid":"Simplify and clarify the path requirement, emphasizing format without unnecessary detail.","description":"Enter the relative file path without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool generates a comprehensive overview of all existing files in the 'main' branch of the specified repository. The output includes a list of file names, their respective directory paths within the repository, and a concise summary of each file's contents. It is designed to assist users in grasping the overall structure and content of the repository, particularly beneficial for large codebases. The tool does not require any input parameters. To execute, simply trigger the tool with an empty string as input, i.e., ''. Ensure that the repository context is properly set beforehand to avoid errors.","fields":{"instructions":{"problems_with_current_description":"Ambiguity and lack of clarity regarding input requirements.","how_to_avoid":"Clearly state input requirements and provide concise examples.","description":"No input needed; leave the field empty using an empty string ('')."}}}
{"name":"List_branches_in_this_repository","description":"This tool, 'List_branches_in_this_repository', retrieves and returns a list of all branch names within the current repository. It requires no input parameters; simply invoke the tool to receive the branch names. Note that this tool is only applicable within the context of a repository environment where branch information is accessible. Ensure you are executing this tool in a compatible environment to receive accurate results.","fields":{"instructions":{"problems_with_current_description":"The description is vague and may confuse users about what 'no input required' entails.","how_to_avoid":"Clarify that the field should be left empty by stating it explicitly.","description":"Leave this field empty; no input is needed (e.g., '')."}}}
{"name":"Set_active_branch","description":"Set_active_branch: This tool is used to change the active branch in a repository, similar to using `git checkout <branch_name>`. It does not create a new branch but only switches to an existing one. To use this tool correctly, you must provide the exact name of the branch you want to switch to as a string input parameter. Example of correct usage: `set_active_branch('my_branch')`. Note: This tool does not accept branch creation commands like `git switch -c <branch_name>`. Ensure the branch name provided exists in the repository.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity about the field's purpose.","how_to_avoid":"Provide a concise and clear explanation of what the field represents.","description":"Specify the branch name, e.g., `my_branch`."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool facilitates the creation of a new branch in a repository. Usage Instructions: You must provide the name of the new branch as a string input parameter. The branch name should be a valid Git identifier, meaning it cannot include spaces or special characters except for dashes ('-') and underscores ('_'). For example, a valid branch name would be 'feature_update'. Ensure that the branch name does not conflict with existing branches in the repository. Input Parameter: 'instructions' (required) - A string representing the desired branch name, e.g., 'my_branch'. This tool does not handle branch naming conflicts or invalid branch names, so ensure the input is valid and unique.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what the branch name should represent or its context.","how_to_avoid":"Clarify the context and purpose of the branch name to provide better understanding.","description":"Specify the branch name used in version control, e.g., 'my_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files within a specified directory. To use this tool correctly, follow these instructions: \n\n1. **Input Format**: Provide the directory path as a plain string without any additional characters or parameter names. \n\n2. **Example of Correct Input**: 'some_dir/inner_dir' \n\n3. **Example of Incorrect Input**: Do not use parameter names or additional syntax, e.g., 'path=some_dir/inner_dir' or 'directory: some_dir/inner_dir'. \n\n4. **Exclusions**: Ensure that the path does not include any invalid characters or escape sequences that are not supported by your operating system. \n\n5. **Allowed Paths**: The tool only accepts valid directory paths that the system recognizes. \n\nBy adhering to these guidelines, you will avoid translation errors and ensure the tool functions as expected.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and doesn't clarify the expected input format.","how_to_avoid":"Specify that the input should be a directory path string without additional context.","description":"Enter the directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool allows users to search for issues and pull requests within a repository using specific search queries. **IMPORTANT**: To use this tool effectively, you must provide a search query as a string input parameter. The query should be in natural language and can include keywords or phrases related to issue titles or topics. For example, a valid query would be 'bug fix for login issue' or 'add new feature for user profile'. Ensure your query is concise and relevant to the repository's content. Avoid using complex or vague queries that may lead to inaccurate results. This tool is designed to interpret straightforward natural language queries and will not process code snippets or non-textual data.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks precision, potentially confusing users about the expected input format.","how_to_avoid":"Clarify the expected input by specifying it as a concise search query or keyword phrase.","description":"Enter a concise, natural language search query, such as a title or topic."}}}
{"name":"Create_review_request","description":"Create_review_request: This tool is designed to create a review request for an open pull request associated with the currently active branch. To use this tool correctly, follow these steps: \n1. Ensure there is an open pull request on the current active branch. \n2. Provide the GitHub username of the person you wish to request a review from as a string input parameter. The username should be formatted as a string, e.g., 'my_username'. \n\nImportant Notes: \n- The input must strictly be a valid GitHub username. \n- Do not include any additional characters or spaces in the username string. \n- If the username is incorrect or the pull request does not exist, the request will fail. \n- Ensure you have the necessary permissions to request reviews on the repository. \n\nBy following these guidelines, you can effectively create a review request without encountering translation or usage issues.","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity and specificity regarding the input format and purpose.","how_to_avoid":"Clarify the input format and specify its purpose in the context of the tool.","description":"Enter the GitHub username to query, e.g., 'my_username'."}}}

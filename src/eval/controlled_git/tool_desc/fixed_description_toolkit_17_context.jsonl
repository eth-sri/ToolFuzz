{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of the latest 5 repository issues. No input needed; cannot query specific issues by ID. Invoke multiple times to check for updates. Example: 'List current issues.'","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about when no input is required, causing inconsistent interpretations.","how_to_avoid":"Clarify that no input should be provided unless specifically requested, ensuring consistent behavior.","description":"No input needed; only use an empty string when no specific data is requested."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comments of a specified issue. Input must be an integer issue number, e.g., `42`. Avoid text, symbols, or spelling out numbers. Example: Use '42', not 'issue 42' or 'forty-two'.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't specify input format clearly, resulting in incorrect parsing and invocation failures.","how_to_avoid":"Specify input must be a single integer without text or symbols, directly after 'issue'.","description":"Provide an integer for the issue number, e.g., '42', without additional text or symbols."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use to comment on a GitHub issue. Input format: integer issue number, two newlines, then your comment. Example: '5\\n\\nPlease update to Java 11.' Strictly adhere to this format to avoid errors. The tool can be invoked multiple times for validating file system state.","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity on necessary formatting specifics, leading to frequent invocation errors.","how_to_avoid":"Specify exact formatting requirements, such as using numerals for issue numbers and precise message structures.","description":"Adhere to specified formatting guidelines, including numeral issue numbers and exact message formats."}}}
{"name":"Overview_of_files_included_in_PR","description":"This tool retrieves the full text of all files in a pull request (PR) using the PR number as input. Input must be a standalone integer, e.g., '12'. Avoid symbols like '#' or text around the number. The tool can be invoked multiple times for consistent validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on how to extract the PR number from various prompt formats, causing parsing failures.","how_to_avoid":"Specify clear instructions to extract a numeric PR identifier from diverse prompt formats, ensuring consistent and accurate parsing.","description":"Provide an integer representing the PR number, extracted from phrases like 'PR #12' or 'pull request 12'."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetch full text of all files in a PR by providing only the PR number as an integer (e.g., 12). Avoid extra text or prefixes. Can be invoked multiple times for state validation. Examples: Correct - '12', Incorrect - 'PR 12'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clearly specify the input format or constraints for the pull request number.","how_to_avoid":"Specify that the pull request number should be entered as an integer without any additional text or symbols.","description":"Enter the pull request number as a plain integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File: Use this tool to create files in a GitHub repo. Input must include the file path (without a leading slash) and file contents, separated by a newline. Example: 'path/to/file.txt\\n\\nfile contents'. Invoke multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on specific formatting requirements, leading to misinterpretation.","how_to_avoid":"Specify clear formatting guidelines for the instructions to ensure consistent and accurate input.","description":"Provide detailed, step-by-step formatting instructions for precise task execution."}}}
{"name":"Read_File","description":"Read_File: Use this tool to read a file's contents via the GitHub API. Provide the full file path relative to the repository root, without starting with a slash (e.g., `some_dir/my_file.py`). Validate paths beforehand to avoid errors, and use multiple invocations for checking file system state. Example: 'src/java/MyClass.java'.","fields":{"instructions":{"problems_with_current_description":"The current description fails to clarify that the path should not contain subdirectories or special characters like slashes.","how_to_avoid":"Clarify the path format and specify that it should be relative without any leading slashes or special characters.","description":"Provide a relative file path without leading slashes or special characters, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update a file in a GitHub repository. Input must include: a full file path (no leading slash), old contents wrapped with 'OLD <<<<' and '>>>> OLD', and new contents wrapped with 'NEW <<<<' and '>>>> NEW'. Example: 'test/test.txt\\nThis is text that will not be changed\\nOLD <<<<\\nold contents\\n>>>> OLD\\nNEW <<<<\\nnew contents\\n>>>> NEW'. Invoke multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on how to structure changes, resulting in incorrect or incomplete input.","how_to_avoid":"Provide clear instructions on specifying file paths and formatting change requests precisely with OLD and NEW markers.","description":"Adhere strictly to given rules: specify file paths and format changes using OLD and NEW markers clearly."}}}
{"name":"Delete_File","description":"Delete_File: Use to delete a file in a GitHub repository by providing the exact file path as a string without starting with a slash, e.g., 'some_dir/my_file.py'. Avoid additional text. Invoke multiple times to ensure file state validation.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't explicitly instruct users to provide the exact file path string in their input, causing misinterpretation.","how_to_avoid":"Clarify that users need to directly provide the file path string without additional context or phrasing.","description":"Provide the exact file path string to delete, avoiding contextual phrases. Example: 'src/main/java/com/example/servlets/ExampleHandler.java'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool lists all files in the main branch, showing file names, paths, and summaries. It cannot filter specific directories; it only provides a full overview. Invoke it multiple times for consistent validation. No input parameters are needed.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on when input is not required, leading to incorrect argument generation.","how_to_avoid":"Clarify that the field should remain empty when no specific instructions are needed.","description":"Leave empty when no specific instructions are needed, e.g., use an empty string ('')."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch the repository's active branch by specifying the branch name as a string, like 'main'. Use explicit branch names without additional context. The tool can be invoked multiple times to check the file system state. Examples: 'feature_branch', 'development'.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and doesn't clarify the need for a precise branch name.","how_to_avoid":"Specify that the input should be the exact name of the branch to switch to.","description":"Exact branch name for switching, e.g., 'feature_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: Use this tool to create a repository branch by specifying the branch name as a direct string input. Example: 'my_branch'. Ensure the name is standalone and free of extra text. The tool can be invoked multiple times for state verification.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the format or example of how to use the field, leading to misunderstandings.","how_to_avoid":"Provide a clear instruction format or example for entering the branch name.","description":"Specify the branch name to create, such as 'feature_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files in a specified directory. Input must be a valid directory path string (e.g., 'some_dir/inner_dir'). Ensure paths are directories, not files. Invoke tool multiple times for consistent validation of directory contents.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what specific format or instructions are expected for input, leading to confusion and incorrect arguments.","how_to_avoid":"Clarify that only the directory path should be inputted without any additional text or instructions.","description":"Enter only the directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests in a repository by specifying a precise search query as a string input. Ensure queries relate directly to repository topics. For example, use 'Issue: Java 11 migration challenges'. The tool can be invoked multiple times to check the repository state.","fields":{"instructions":{"problems_with_current_description":"The description is vague and doesn't clarify what the input should be, leading to misinterpretation.","how_to_avoid":"Clearly define the expected format and content of the query.","description":"Enter a concise search query related to your issue or topic, e.g., 'Switching challenges to Java 11'."}}}
{"name":"Create_review_request","description":"Create a review request for an open pull request on the active branch by specifying the GitHub username as a string input. Format: {\"username\":\"desired_username\",\"instructions\":\"Review request instructions\"}. Invoke multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the format or context needed to generate correct arguments.","how_to_avoid":"Clarify that the username should be relevant to the context of the request and related to review actions.","description":"Specify the GitHub username relevant to the review request, e.g., `code_checker`."}}}

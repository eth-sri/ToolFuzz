{"name":"Get_Issues","description":"Get_Issues Tool: This tool is designed to retrieve a list of issues from a specified repository. It will return an array containing the titles and issue numbers of up to 5 issues from the repository. This tool requires no input parameters from the user. To use it correctly, simply invoke the tool without providing any input or arguments (use an empty string if necessary). The tool is limited to fetching details of the first 5 issues and will not process any additional input or parameters. Ensure the repository is accessible and contains issues to receive meaningful results.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about what is required in the field.","how_to_avoid":"Specify that the field should explicitly remain empty.","description":"Field should be left empty; input not required."}}}
{"name":"Get_Issue","description":"Get_Issue Tool: This tool retrieves the title, body, and comment thread of a GitHub issue. To use the tool correctly, you must provide the issue number as a single integer. The issue number should be an existing, positive integer that identifies a specific issue within a repository. Example of correct usage: `42`. Ensure that the issue number is valid and corresponds to an actual issue within the system. This tool does not accept any other data types, such as strings, floats, or negative numbers. Providing an incorrect format or a non-existent issue number will result in an error or unsuccessful retrieval. Please verify the issue number before inputting it into the tool.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected input format and context.","how_to_avoid":"Specify the input as an 'integer representing an issue number'.","description":"Enter an integer representing the issue number, e.g., `42`."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool allows you to post comments on GitHub issues with a specified format to ensure accurate processing. To use this tool effectively, adhere to the following format guidelines: \n\n1. **Issue Number**: Begin your input with the issue number (must be an integer). This identifies the specific GitHub issue you wish to comment on.\n\n2. **Formatting Separator**: After the issue number, insert exactly two newline characters to separate the issue number from your comment.\n\n3. **Comment Content**: Enter your comment following the separator. Ensure that your comment adheres to any specified formatting instructions or guidelines.\n\n**Important Usage Note**: Use this tool sparingly to avoid cluttering the comment threads on GitHub. Improperly formatted inputs may result in failed actions or unintended outcomes.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks detail on what formatting is required.","how_to_avoid":"Specify the exact formatting guidelines to enhance clarity.","description":"Adhere to specified formatting guidelines for accurate field completion."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool retrieves a list of open pull requests (PRs) from a specified repository. It returns the title and PR number of up to 5 open pull requests. The tool does not require any input parameters from the user; it automatically fetches the information. However, users must ensure that they have appropriate access permissions to the repository from which they wish to retrieve pull request data. This tool is useful for quickly obtaining a snapshot of active pull requests without needing detailed input or configuration.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear and lacks precision.","how_to_avoid":"Use clear and concise language to convey the requirement effectively.","description":"No input needed; use an empty string ('') as default."}}}
{"name":"Overview_of_files_included_in_PR","description":"The 'Overview_of_files_included_in_PR' tool allows users to fetch the full text of all files included in a specific pull request (PR) by providing the PR number as input. This tool is designed for developers who need to understand or contribute to the code changes within a PR. To use this tool correctly, you must input the PR number as an integer (e.g., 12). Ensure that the PR number is a valid integer corresponding to an existing pull request in your repository. Non-integer inputs or invalid PR numbers will result in an error. This tool is restricted to fetching text from files within the specified PR and does not support any other operations outside this scope.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on what 'PR number' refers to, causing potential confusion.","how_to_avoid":"Specify the context of 'PR number' clearly to eliminate ambiguity.","description":"Enter the pull request number as an integer, e.g., `12`."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request: This tool facilitates the creation of a new pull request in a GitHub repository. **IMPORTANT INSTRUCTIONS**: Your input must adhere to the following strict format:\n\n1. **Title**: Begin by specifying the title of the pull request.\n2. **Newlines**: Immediately after the title, insert two consecutive newline characters.\n3. **Body/Description**: Provide the body or description of the pull request.\n\nWhen relevant, reference any related issues within the body by using the exact syntax `closes #<issue_number>`, such as `closes #3` or `closes #6`.\n\n**Example**: To create a pull request with the title 'README updates' and the body 'added contributors' names, closes #3', format your input as follows:\n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nEnsure all formatting instructions are followed precisely to ensure the tool functions correctly.","fields":{"instructions":{"problems_with_current_description":"Lacks detail on formatting specifics, causing potential confusion.","how_to_avoid":"Specify exact formatting requirements for clarity.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files Tool Manual: This tool retrieves the complete text of all files associated with a specified pull request (PR) using the PR number as input. It is designed to help users understand and contribute to code changes within a PR. To use this tool correctly, please adhere to the following instructions: \n1. Input Requirement: You must provide the PR number as an integer. \n2. Input Format: The PR number should be a positive integer, for example, `12`. \n3. Constraints: Ensure the PR number corresponds to an existing pull request in your repository. \n4. Usage: The tool will process the specified PR number and return the text of all files in the PR. Incorrect or non-integer inputs will result in errors. \nBy following these guidelines, you can effectively use the tool to access and review pull request file contents.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on what 'PR' refers to and omits usage context.","how_to_avoid":"Specify 'PR' as 'Pull Request' and clarify its role in the process.","description":"Provide the Pull Request (PR) number as an integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File: This tool is a wrapper for the GitHub API, designed to facilitate the creation of a new file within a GitHub repository. **VERY IMPORTANT**: Your input to this tool MUST adhere to the following guidelines to ensure correct functionality: \n\n1. Specify the file to be created by providing a full file path. **IMPORTANT**: The path must not start with a slash ('/').\n2. Specify the contents of the file immediately after the file path.\n\nYour input should be a single string where the file path and contents are separated by a newline character. For instance, if you want to create a file named 'test.txt' in a directory named 'test' with the text 'test contents', input the following string:\n\n```\ntest/test.txt\ntest contents\n```\n\nEnsure there is no extra information such as 'instructions' included in the input string. This precise format is essential for the tool to function correctly.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what formatting is required.","how_to_avoid":"Specify the exact formatting guidelines and requirements to ensure clarity.","description":"Ensure compliance with specified formatting guidelines."}}}
{"name":"Read_File","description":"Read_File Tool: This tool is designed to interface with the GitHub API to read the contents of a specified file within a repository. To use the tool correctly, follow these instructions: 1. Provide the full file path relative to the root of the repository. The path must not begin with a slash '/'. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. 2. Ensure the file path is accurate and corresponds to a file within the repository you have access to. 3. This tool is limited to reading files; it cannot modify or delete them. Use this tool for reading file content only. Incorrect usage, such as providing an invalid path or attempting to use the tool for unsupported operations, will result in errors.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and may confuse users with unnecessary details.","how_to_avoid":"Use concise language and focus on essential information.","description":"Specify the file path without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: This tool acts as an interface to the GitHub API, specifically designed for updating the contents of a file within a GitHub repository. **IMPORTANT INSTRUCTIONS**: To use this tool correctly, follow these precise steps for input formatting: \n\n1. **Specify File Path**: Begin by specifying the full file path of the target file you wish to modify. Note that the path must not start with a slash ('/'). For example, use 'test/test.txt' instead of '/test/test.txt'.\n\n2. **Indicate Old Contents**: Clearly define the old contents you intend to replace. Enclose these contents within the markers OLD <<<< and >>>> OLD. Ensure this section accurately reflects the current content of the file.\n\n3. **Indicate New Contents**: Specify the new contents that will replace the old contents. Enclose these within the markers NEW <<<< and >>>> NEW.\n\n**Example Usage**: If you wish to update the file 'test/test.txt' by changing 'old contents' to 'new contents', your input should be formatted as follows:\n\n```\ntest/test.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n```\n\nBy adhering to these guidelines, you ensure the tool can process your request efficiently and accurately.","fields":{"instructions":{"problems_with_current_description":"The initial description lacks specificity and clarity.","how_to_avoid":"Use concise and direct language to clearly convey the requirement.","description":"Adhere strictly to all specified guidelines."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool provides a convenient interface for deleting files from a GitHub repository using the GitHub API. To use this tool correctly, you must provide the file path of the file you wish to delete as a string. **IMPORTANT**: The file path must be relative to the repository's root and must NOT start with a leading slash. For example, a valid input would be 'some_dir/my_file.py'. Ensure that the input is strictly a string representing the file path, without including parameter names or additional text. This precise format is necessary for the tool to function correctly and avoid errors in operation.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and lacks clarity, making it difficult to understand the input requirements.","how_to_avoid":"Use concise language and clarify that the input should be a relative file path.","description":"Enter a relative file path to delete, without a leading slash, e.g. 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"The 'Overview_of_existing_files_in_Main_branch' tool is designed to give users a comprehensive overview of all existing files within the main branch of a repository. When executed, this tool generates a list detailing each file's name, its path within the repository, and a brief summary of its contents. This information is particularly useful for understanding the repository's structure and navigating large codebases. Users do not need to provide any input parameters or instructions to use this tool; simply execute the tool to receive the overview. It is important to note that the tool only reads the current state of the main branch and will not modify any files or data.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not specify the purpose clearly.","how_to_avoid":"Provide a concise explanation that clearly states no input is necessary.","description":"No input needed; leave as an empty string ('')."}}}
{"name":"List_branches_in_this_repository","description":"Tool Name: List_branches_in_this_repository\n\nDescription: This tool retrieves and lists all branches within a specified repository. The tool outputs the name of each branch in the repository without requiring any input parameters.\n\nUsage Instructions:\n1. Initialize the tool without providing any input parameters; an empty string is sufficient.\n2. Trigger the tool, and it will automatically gather and return the list of branch names from the repository.\n\nImportant Notes:\n- Ensure that you have the necessary permissions to access the repository before using the tool.\n- The tool does not accept any input parameters, so input fields should be left empty.\n\nExpected Output:\n- A list containing the names of all branches in the repository.","fields":{"instructions":{"problems_with_current_description":"The description is vague and might confuse users about what 'No input required' means.","how_to_avoid":"Clarify that the field should remain empty, with no additional input needed.","description":"Leave blank; no input necessary (use empty string)."}}}
{"name":"Set_active_branch","description":"Set_active_branch Tool: This tool is used to change the active branch in a Git repository. It functions similarly to the Git command `git checkout <branch_name>` and `git switch <branch_name>`. To use this tool, you must provide the exact name of the target branch as a string input parameter. The input must be formatted as follows: {'instructions': '<branch_name>'}. For example, to switch to a branch named 'feature-branch', you would input: {'instructions': 'feature-branch'}. Please ensure that the branch name is valid and exists in the repository. This tool does not create new branches; it only switches to existing ones.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and doesn't clearly specify the purpose or format of the field.","how_to_avoid":"Provide a clear, concise description that specifies the field's purpose and expected input format.","description":"Enter the specific branch name, e.g., 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool is designed to create a new branch in the repository. To use this tool correctly, follow these instructions: \n\n1. **Input Parameter Required**: You must provide the name of the new branch as a string input. \n2. **Naming Conventions**: The branch name should be a valid string without spaces or special characters (except dashes and underscores). \n3. **Example**: A valid branch name could be `feature_update_2023`. \n4. **Usage**: Specify the branch name using the `instructions` parameter. For example, if you want to create a branch named `my_feature`, set `instructions` to `\"my_feature\"`.\n\nNote: Ensure that the branch name is unique within the repository to avoid conflicts.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on the purpose and usage context of the branch name.","how_to_avoid":"Specify the context and usage for naming branches.","description":"Specify the branch name used in version control, e.g., `feature_update`."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files located within a specified directory. **IMPORTANT USAGE INSTRUCTIONS**: Provide only the path of the directory as a plain string input. Do not include any parameter names or additional context. For example, use 'some_dir/inner_dir' to specify the directory path. Ensure the path is correctly formatted as a string without any extraneous text. Incorrect usage, such as including parameter names or additional context, will result in failure to execute the tool properly.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the expected input format.","how_to_avoid":"Specify the input as a string representing a directory path without including the parameter name.","description":"Enter a directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests Tool: This tool allows you to search for issues and pull requests within a specified repository. To use this tool effectively, follow these guidelines: \n1. **Input Requirements**: You must provide a search query as a string. This query should be a natural language phrase or keyword representing the issue title, topic, or any related information you wish to search for. \n2. **Search Logic**: The tool uses a natural language processing engine to interpret your query. It supports standard search operations like keyword matching. However, it does not support advanced query syntax such as regular expressions or Boolean logic. \n3. **Examples**: Valid examples of search queries include 'bug fix login error', 'enhancement request', or 'update documentation'. \n4. **Limitations**: Ensure your search query is clear and concise to maximize search accuracy. Avoid overly complex sentences or unrelated terms. \nBy following these instructions, you can efficiently search for relevant issues and pull requests in your repository.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on expected input format.","how_to_avoid":"Provide a concise and specific guideline for input structure and intent.","description":"Enter a natural language query to describe your issue or topic, e.g., 'Login problems on website'."}}}
{"name":"Create_review_request","description":"Create_review_request: This tool is designed to create a review request on an existing open pull request that aligns with the current active branch in your GitHub repository. To use this tool correctly, follow these steps: 1. Ensure you are operating on the branch associated with the open pull request you wish to target. 2. Identify the GitHub username of the individual you want to request a review from. 3. Provide the username as a string input parameter in the tool, formatted as follows: `instructions:required:GitHub username of the user being requested, e.g. 'my_username'`. Important: The tool will not create new pull requests or modify branch settings; it only sends a review request to the specified user on the identified pull request.","fields":{"instructions":{"problems_with_current_description":"The current description lacks context and clarity on the expected input format.","how_to_avoid":"Specify the purpose and format of the input more clearly.","description":"Enter the GitHub username to query, formatted as a string, e.g., 'my_username'."}}}

{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of the latest 5 repository issues. No input needed. Invoke multiple times to check for updates. Example usage: 'What are the latest issues?'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity, causing confusion about when or what input is necessary, leading to incorrect prompt results.","how_to_avoid":"Clarify that no user input is needed and provide examples of correct prompts to ensure accurate usage.","description":"No user input required. Prompts should directly query issue titles using specific keywords like 'ticket ID'."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetches the title, body, and comment thread of a specific issue. **IMPORTANT**: Input must be the issue number as a pure integer, e.g., `42`. Avoid additional words or symbols. Supports multiple invocations for state validation. Examples: `42`, `7`.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the required format for input, leading to incorrect or inconsistent user input.","how_to_avoid":"Specify that the issue number must be provided as a numeral without additional text or symbols.","description":"Provide the issue number solely as a numeral, e.g., '42'."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to comment on a GitHub issue by following strict input format. Start with the numeric issue number, followed by two newlines, then your comment. Avoid words or symbols for issue numbers. Example: '5\\n\\nPlease update dependencies.' The tool can be invoked multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity on specific formatting requirements, leading to failures.","how_to_avoid":"Clearly specify the exact format for referencing issues and comments.","description":"Use exact issue numbers in numeric format and maintain required message structure."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of all files in a pull request by providing the PR number as an integer (e.g., 12). Avoid prefixes like 'PR', '#', or text around the number. Invoke multiple times for validation. Example: Use 'Fetch files from PR 12'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify the expected input format for the PR number, leading to parsing errors.","how_to_avoid":"Specify that the PR number should be provided as an integer without any prefix or special characters.","description":"Enter the PR number as a standalone integer, e.g., 12, without any prefixes or symbols."}}}
{"name":"List_Pull_Requests_Files","description":"Fetch all file contents in a pull request using only the PR number as an integer input (e.g., 12). Ensure input is an integer without additional text. The tool can be invoked multiple times for accurate state validation. Examples: 'List files in PR 5', 'Fetch files from PR 7'.","fields":{"instructions":{"problems_with_current_description":"The description is unclear about how to format the PR number, leading to invocation failures.","how_to_avoid":"Specify that the PR number should be an integer without any prefix or text.","description":"Enter the pull request number as a plain integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File: Use to create files in GitHub repositories. Input format: <file_path>\n\n<file_contents>. Ensure file path doesn't start with '/'. For example, 'src/MyFile.txt\n\nFile content here'. Validate format before invocation. Invoke multiple times if needed.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected format and specific content required.","how_to_avoid":"Provide detailed formatting guidelines and examples to clarify expectations.","description":"Ensure instructions are formatted as 'file_path\\n\\nfile_contents'."}}}
{"name":"Read_File","description":"Read_File: This tool reads file contents via the GitHub API. Submit the full file path without a leading slash (e.g., 'some_dir/my_file.py'). Verify paths for correct formatting. You may invoke the tool multiple times to check file system consistency. Example: 'docs/readme.txt'.","fields":{"instructions":{"problems_with_current_description":"The description is unclear about the requirement for the file path format and does not explicitly state that the path should not begin with 'src/'.","how_to_avoid":"Clarify the description to specify that the file path should not start with 'src/' or a slash, to ensure correct input formatting.","description":"Enter the file path relative to the working directory, excluding leading 'src/' or slashes, e.g., 'main/java/com/example/servlets/ConfigReader.java'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update file contents in a GitHub repo. Format input as: 'file_path\nText unchanged\nOLD <<<< old_content >>>> OLD\nNEW <<<< new_content >>>> NEW'. Ensure file path has no leading slash. Validate inputs multiple times. Example: 'test/file.txt\nOLD <<<< old >>>> OLD\nNEW <<<< new >>>> NEW'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the format and detail needed for instructions, leading to incorrect or incomplete input.","how_to_avoid":"Specify the exact format and detail required for the instructions to ensure correct input and prevent errors.","description":"Provide detailed, formatted instructions exactly as specified for successful execution."}}}
{"name":"Delete_File","description":"Delete_File: Use to delete a file in a GitHub repository by inputting the exact file path, e.g., 'some_dir/my_file.py'. Ensure the path exists and omit any slashes at the start. Validate paths before use. Invoke multiple times to check the repository state. Examples: 'delete some_dir/my_file.py', 'remove path/to/file.txt'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on input format, leading to misinterpretation and errors in handling file paths.","how_to_avoid":"Specify the input should be a string of the file path relative to the repository root, without a leading slash.","description":"Enter the relative file path to delete, without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides a comprehensive overview of all files in the main branch, including file names, paths, and summaries. It does not support requests for specific subdirectories. No input parameters are needed. For specific folder details, run the tool multiple times. Example: 'Overview of the entire main branch.'","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity on when inputs are required, causing confusion in distinguishing between valid and invalid prompts.","how_to_avoid":"Clearly specify when inputs should be omitted and provide examples of valid prompt structures.","description":"No input needed for this field; use empty string ('') when applicable."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switches the active repository branch. Input must be a direct string specifying the branch name, e.g., 'main'. Avoid questions or extra text. Tool can be invoked multiple times to ensure correct branch setting. Examples: 'main', 'feature_branch'.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague, leading to unclear instructions and incorrect arguments.","how_to_avoid":"Specify that the field requires the exact name of the branch to switch to.","description":"Specify the exact branch name to switch to, e.g., 'main', 'dev_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool creates a new branch in the repository. To use it, specify the branch name as a string input parameter, e.g., 'my_branch'. Ensure correct syntax to avoid errors. Re-invoke if needed to check the system state. Examples: 'Create_a_new_branch: {\"instructions\": \"java_11_migration\"}'.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague, leading to confusion about what constitutes a valid branch name.","how_to_avoid":"Clarify that the branch name must be a single word without special characters or spaces.","description":"Enter a valid branch name using lowercase letters, numbers, and underscores only, e.g., 'feature_update'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Input the directory path as a single string, e.g., 'some_dir/inner_dir'. Do not include file names or additional text. The tool extracts all files within the specified path. Invoke multiple times to ensure the file system state. Examples: 'src/main/java/' or 'src/resources/'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on expected input format and overlooks specific directory listing tasks.","how_to_avoid":"Clearly specify that the input should be a directory path string for listing contents, file details, or counting files.","description":"Enter a directory path as a string to list files, count them, or view file details."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool searches for issues and pull requests in a repository. Input must be a specific string query like 'Issue title' or 'Pull request topic'. Avoid vague questions. Use precise terms for accurate results. Invoke multiple times to check file system state.","fields":{"instructions":{"problems_with_current_description":"The current description is vague, leading to incorrect or irrelevant queries.","how_to_avoid":"Provide a clear example and specify the format or components of a valid query.","description":"Enter a concise natural language query to describe your issue, e.g., 'Common challenges when upgrading to Java 11'."}}}
{"name":"Create_review_request","description":"Create_review_request: Generates a review request for the current branch's open pull request. Input the exact GitHub username of the reviewer as a string, e.g., 'username123'. Avoid prefixes like 'dev_'. Re-run for validation. Example: 'reviewer_name'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify the format or underscore usage in usernames, leading to misinterpretation.","how_to_avoid":"Specify that usernames should contain underscores between words, without any special characters.","description":"GitHub username with underscores separating words, e.g., `my_username`, required for review requests."}}}

{"name":"Get_Issues","description":"Get_Issues Tool: This tool retrieves a list of issues from a specified repository. Specifically, it returns the title and issue number for up to 5 issues. To use this tool correctly, you must provide an empty string ('') as input, indicating no specific repository details are needed from the user. The tool automatically targets a pre-defined repository context. Note: This tool is limited to fetching details of only 5 issues at a time, and it does not allow any additional parameters or input beyond the empty string. Ensure you understand these constraints to use the tool effectively.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity about the requirement.","how_to_avoid":"Provide a concise and clear statement about the absence of input requirements.","description":"No input is needed; use an empty string ('')."}}}
{"name":"Get_Issue","description":"Get_Issue Tool Manual: This tool retrieves the title, body, and comment thread of a specific issue from a database or repository. Usage Guidelines: 1. Input Parameter: You must provide the issue number as an integer. The issue number should be a positive integer (e.g., 42) and corresponds to the unique identifier of the issue you wish to fetch. 2. Allowed Input: Only a single integer value is accepted. Ensure no additional characters or spaces are included. 3. Disallowed Actions: Do not input non-integer values, negative integers, or leave the input field empty. 4. Example of Correct Usage: To fetch the issue details for issue number 42, your input should be exactly '42' without quotes or additional characters. Following these instructions will ensure accurate retrieval of issue data.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on expected value format and doesn't specify the field purpose.","how_to_avoid":"Clarify the expected input format and specify the field's role.","description":"Provide the issue number as a whole integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool is designed to facilitate the addition of comments to GitHub issues. To use it correctly, your input must adhere to the following structured format: \n\n1. Start with the issue number as an integer (e.g., 123).\n2. Insert two newline characters to separate the issue number from the comment.\n3. Provide your comment, ensuring it adds value to the discussion and maintains the thread's clarity.\n\nExample Input:\n```\n123\n\nThis is a valuable comment providing insights or asking relevant questions.\n```\n\nGuidelines:\n- Use this tool sparingly to avoid cluttering the issue threads with unnecessary comments.\n- Ensure that comments are constructive, relevant, and contribute to the resolution of the issue.\n- Failure to follow this input structure may result in the rejection of the comment.\n\nThis tool is intended to streamline collaboration while maintaining the integrity and readability of the GitHub issue threads.","fields":{"instructions":{"problems_with_current_description":"Too vague and lacks specific guidance.","how_to_avoid":"Provide clear, concise instructions on formatting requirements.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool automatically retrieves a list of up to 5 open pull requests (PRs) from a predefined repository, displaying the title and PR number for each. It is important to note that this tool does not require any user input or parameters. Simply activate the tool, and it will perform the task using its preset configurations. The tool is specifically designed to work with a predefined repository context, so ensure that the correct repository is set up before using the tool. It is not designed for user-specified repositories or for fetching more than 5 PRs at a time.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity about the field's purpose.","how_to_avoid":"Clearly state that the field should remain empty and no user input is required.","description":"Leave this field empty; no user input is necessary."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR: This tool retrieves the full text of all files included in a specified pull request (PR) from a repository. It is designed to assist users in understanding or contributing to code changes within the PR. To use this tool correctly, you must provide the PR number as an integer. Input only the PR number without any additional characters or symbols. For example, if the PR number is 12, input '12'. The tool will output the complete text of each file in the specified PR, enabling detailed examination of code modifications. Please ensure that the PR number is valid and corresponds to an existing PR in the repository.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the purpose and context of the PR number.","how_to_avoid":"Clarify the role of the PR number and ensure it's clear it's an identifier.","description":"Provide the pull request (PR) number as an integer, such as `12`."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request Tool: This tool is designed to help you generate a new pull request in a GitHub repository. To use this tool correctly, follow these precise input formatting rules:\n\n1. **Title of the Pull Request**: Begin by specifying the title of your pull request. Make sure it is concise and descriptive.\n\n2. **Newlines**: After the title, insert two newlines to separate the title from the body.\n\n3. **Body/Description**: Write a detailed description of the pull request. This should include any relevant information about the changes you are proposing.\n\n4. **Reference Issues**: When applicable, reference any related issues in the body using the syntax `closes #<issue_number>`. For example, to reference issues 3 and 6, use `closes #3, closes #6`.\n\nExample Input:\nTo create a pull request titled 'README updates' with the content 'added contributors' names, closes #3', format your input as follows:\n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nEnsure you follow the required formatting to avoid errors.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks guidance.","how_to_avoid":"Clarify the task by specifying formatting requirements.","description":"Adhere to specified formatting guidelines."}}}
{"name":"List_Pull_Requests_Files","description":"The 'List_Pull_Requests_Files' tool allows you to retrieve the full text of all files associated with a specific pull request (PR). To use this tool effectively, you need to provide the PR number as an input parameter. This input must be an integer value representing the PR's unique identifier, for example, `12`. The tool will then output the complete text of all files involved in the specified PR, which is beneficial for reviewing code changes or participating in the development process. Important: Ensure that the PR number is inputted correctly as an integer to avoid errors in data retrieval.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on the purpose and context of the PR number.","how_to_avoid":"Specify the context and usage of the PR number as an integer.","description":"Enter the pull request (PR) number as an integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool: This tool is a wrapper for the GitHub API and is used to create a file in a GitHub repository. To use this tool correctly, please follow these instructions strictly: \n\n1. **File Path Specification**: Begin by specifying the full file path where you want the new file to be created. \n   - Important: Do not start the path with a slash (e.g., use 'directory/file.txt', not '/directory/file.txt').\n\n2. **File Content Specification**: After the file path, specify the contents of the file.\n\n3. **Input Format**: Your input must be in the following format:\n   - First line: Full file path (without leading slash)\n   - Second line: Contents of the file\n\n**Example**: To create a file named 'test.txt' inside the 'test' directory with the contents 'test contents', your input should look like this:\n```\ntest/test.txt\ntest contents\n```\n\nMake sure to adhere to this format precisely to ensure successful file creation.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks specific formatting details.","how_to_avoid":"Provide explicit formatting guidelines and examples.","description":"Adhere to specified formatting guidelines for consistent document structure."}}}
{"name":"Read_File","description":"Read_File Tool: This tool allows you to read the contents of a file from a GitHub repository using the GitHub API. To use this tool, you must provide the full file path to the file you wish to read. **Important Requirements**: \n1. The file path should not start with a slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. \n2. The file path must be relative to the repository's root directory. \n3. Ensure you have permission to access the repository and the file in question. \nUse this tool when you need to access and read specific files stored in a GitHub repository.","fields":{"instructions":{"problems_with_current_description":"The current description is too verbose and lacks clarity regarding the path format.","how_to_avoid":"Use concise language and specify the requirement without unnecessary detail.","description":"Specify a relative file path without leading slashes, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File Tool: This tool acts as an interface to the GitHub API, specifically designed to update the contents of a file within a GitHub repository. To use this tool correctly, you must adhere to the following input format: \n\n1. **File Path:** Start by specifying the full path of the file you wish to modify. Note that the path must not begin with a slash (e.g., 'folder/subfolder/filename.ext').\n\n2. **Old Content:** Clearly indicate the content you want to replace by wrapping it between the markers 'OLD <<<<' and '>>>> OLD'. Ensure that the content within these markers exactly matches the existing content in the file.\n\n3. **New Content:** Specify the new content to replace the old content, wrapped between the markers 'NEW <<<<' and '>>>> NEW'.\n\n**Example Usage:**\nTo change the file 'docs/guide.txt', replacing 'old text' with 'new text', the input should be structured as follows:\n\n```\ndocs/guide.txt\n\nSome text that remains unchanged\nOLD <<<<\nold text\n>>>> OLD\nNEW <<<<\nnew text\n>>>> NEW\n```\n\n**Important Notes:**\n- Follow the input format precisely to avoid errors.\n- Ensure that the 'OLD' content section matches the exact text you wish to replace in the file.\n- This tool only supports text replacements; it does not support other types of file modifications.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks explicit directives.","how_to_avoid":"Provide clear, concise, and actionable instructions.","description":"Adhere strictly to the specified rules without deviation."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool is designed to delete a specified file from a GitHub repository using the GitHub API. To use this tool correctly, you must provide the full path to the file you wish to delete. Important usage guidelines: 1. The file path must be relative to the root of the repository and must not start with a slash (e.g., 'directory/subdirectory/filename.ext'). 2. Only provide the file path as a string input, without including parameter names or additional characters. 3. Ensure that the file path exists in the repository and that you have appropriate permissions to delete the file. 4. Incorrectly formatted paths or paths that do not exist will result in an error. Example of correct input: 'src/utils/helper.js'. Example of incorrect input: '/src/utils/helper.js'.","fields":{"instructions":{"problems_with_current_description":"The current description is slightly verbose and may confuse users about input requirements.","how_to_avoid":"Simplify and clearly specify the input format without unnecessary details.","description":"Provide file path to delete; path must not start with slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"Overview_of_existing_files_in_Main_branch: This tool generates a comprehensive list of all files present in the main branch of a repository. It provides file names, their paths, and concise summaries of their contents. This tool is particularly useful for understanding the structure and contents of large codebases. Usage Instructions: 1. Invoke the tool without any input parameters; it automatically generates the overview. 2. Ensure that the repository is accessible and the main branch is up-to-date. 3. Note that the tool does not modify or delete any files; it only reads and summarizes them. 4. For optimal performance, verify that the repository is not excessively large, as this may impact the tool's execution time. Allowed Usage: The tool can be used for any repository where you have read access to the main branch. It is ideal for developers, code reviewers, and project managers needing a quick understanding of the codebase structure. Not Allowed: The tool should not be used for repositories where you do not have permission to access the main branch. Do not attempt to provide input parameters or modify the tool's output directly.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks clarity on the purpose and use of the field.","how_to_avoid":"Provide a clear and concise description, specifying the field's purpose and expected input.","description":"No input needed; leave the field as an empty string ('')."}}}
{"name":"List_branches_in_this_repository","description":"List_branches_in_this_repository: This tool retrieves and returns a list of all branch names within the specified repository. It is designed to be used without any input parameters, meaning you do not need to provide any additional information or data when invoking this tool. Simply call the tool, and it will return the names of all branches. Ensure that you are authorized to access the repository, as the tool will not function correctly without the necessary permissions. This tool is specifically for listing branches and cannot be used for other purposes, such as editing or deleting branches.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and lacks clarity on input requirements.","how_to_avoid":"Provide explicit instructions that indicate no input is needed.","description":"No input needed; leave the field empty (e.g., \"\")."}}}
{"name":"Set_active_branch","description":"Set_active_branch Tool: This tool is designed to set the active branch in a repository, akin to using the `git checkout <branch_name>` for existing branches or `git switch -c <branch_name>` for creating and switching to a new branch. To use this tool correctly, you must provide the branch name as a string input parameter. The parameter 'instructions' is required and should be formatted as a string, specifying the name of the branch you wish to switch to or create, for example, 'my_branch'. Ensure the branch name is valid and follows any naming conventions used in your repository. This tool does not handle branch creation conflicts or errors related to non-existent branches, so confirm branch existence or readiness for creation before using.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and context about its purpose.","how_to_avoid":"Provide a concise explanation of the field's purpose and its expected input.","description":"Specify the branch name, such as 'my_branch', for version control operations."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool allows you to create a new branch in the repository. To use this tool correctly, you must provide the name of the new branch as a string input parameter. The branch name should adhere to the following guidelines:\n\n1. The branch name must be a valid string without any spaces. Use underscores or hyphens if necessary.\n2. Avoid using special characters other than underscores (_) or hyphens (-).\n3. The branch name should not start with a number or a special character.\n4. Example of a valid branch name: 'feature_update', 'bugfix-123', 'release_v1.0'.\n\nBy following these guidelines, you can ensure the tool functions as intended and avoid errors in branch creation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity regarding its purpose and usage.","how_to_avoid":"Provide a more detailed explanation of what the field represents and how it should be used.","description":"Specify the branch name, such as 'my_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files within a specified directory. To use this tool correctly, input the full path of your desired directory as a plain string. For instance, you should provide 'some_dir/inner_dir' if you wish to access files within that specific directory. Be sure to input only the path without any additional characters, parameter names, or formatting. Valid directory paths are those that exist on your system and are accessible. The output will be a list of file names contained in the directory. Ensure your input is accurate to avoid errors in fetching the file list.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear and redundant.","how_to_avoid":"Simplify the description to focus on input requirements.","description":"Enter a directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool allows you to search for issues and pull requests within a repository using a search query. **IMPORTANT INSTRUCTIONS**: You must input the search query as a string parameter. The query should be in natural language and can include keywords related to issue titles, topics, or pull request descriptions. For example, a valid query might be 'bug fix login issue'. Ensure the query is concise and relevant to the repository's content. Avoid using special characters or non-descriptive phrases. Example of incorrect usage: 'asdf1234!@#'. The tool does not support complex queries with logical operators or wildcards. Use plain text for optimal results.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity, making it difficult for users to understand its purpose.","how_to_avoid":"Use clear and concise language to specify the intended input for better user understanding.","description":"Enter a natural language search query, such as an issue title or topic."}}}
{"name":"Create_review_request","description":"Create_review_request Tool: This tool facilitates the creation of a review request on an open pull request that matches the current active branch in your GitHub repository. To use this tool correctly, follow these steps: 1. Ensure that there is an open pull request associated with the current active branch. 2. Provide the GitHub username of the person you want to request a review from as a string input parameter. The username should be in the format of a single string, e.g., 'my_username'. 3. The tool will then create a review request for the specified user on the matching pull request. Important: Failure to provide the correct GitHub username will result in the tool not functioning as expected and no review request will be created. Ensure that the username is valid and correctly formatted.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specificity regarding the format and purpose of the GitHub username.","how_to_avoid":"Clarify the format and purpose, ensuring it specifies that the username is required for accessing user-specific data.","description":"Provide the exact GitHub username needed to access the user's data, e.g., `my_username`."}}}

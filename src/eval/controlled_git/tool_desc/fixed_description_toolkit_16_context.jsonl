{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of the first 5 repository issues. No input required. Use the tool repeatedly to fetch more issues if needed. Ensure queries do not include specific issue identifiers or numbers.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about input requirements, leading to inconsistent prompt results.","how_to_avoid":"Clarify that no input is needed, ensuring prompts align with this expectation.","description":"No input needed, leave blank (use empty string '')."}}}
{"name":"Get_Issue","description":"Get_Issue: Retrieve the title, body, and comments of a specified issue. Input must be an integer issue number, e.g., '42'. Avoid words, symbols, or phrases. The tool can be invoked multiple times for validation. Example: 'Get issue details for 42'.","fields":{"instructions":{"problems_with_current_description":"The current description does not specify the expected format for issue numbers, leading to misinterpretation by users and resulting in errors.","how_to_avoid":"Clearly state that the issue number should be input as a plain integer without any prefixes or symbols.","description":"Enter the issue number as a plain integer (e.g., 42) with no symbols or prefixes."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to comment on a GitHub issue by providing the issue number as an integer, followed by two newlines, and then your comment. Strict formatting is crucial: no additional text or non-integer issue numbers. Validate input for compliance. Example: '5\\n\\nPlease review the new feature.'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity, leading to incorrect prompt formatting and agent invocation failures.","how_to_avoid":"Clearly specify the required format for issue numbers and prompts to ensure proper agent invocation.","description":"Ensure prompts use precise issue number format: 'issue #<number>', avoiding leading zeros and text representation."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of files in a pull request by providing the PR number as an integer (e.g., 12). Avoid adding characters like #, 'PR', or 'pull request'. For consistent results, invoke the tool multiple times. Example: For PR number 3, input '3'.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't specify the format clearly, leading to confusion in recognizing PR numbers in various prompt formats.","how_to_avoid":"Clarify the expected input format for PR numbers and provide examples of acceptable formats.","description":"Input the PR number as a plain integer without any prefix or special characters, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files fetches the full text of all files in a pull request using a single integer PR number as input. Use precise input, e.g., '12'. Avoid additional text. Example: 'Fetch files with PR number 12'. The tool supports multiple invocations for state validation.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't specify the need for extracting only the integer part from the input, leading to parsing errors.","how_to_avoid":"Clarify that the input should be parsed to extract only the numeric part, discarding any non-numeric characters.","description":"Extract the numeric part of the PR number from the input, ignoring any non-numeric characters."}}}
{"name":"Create_File","description":"Create_File: Use this tool to create files in GitHub repositories. Input must include a file path without a leading slash, followed by two newlines and file content. Example: 'dir/file.txt\\n\\nfile content'. Validate format and invoke multiple times to check file system state.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on formatting requirements, leading to incorrect input parsing and agent invocation failures.","how_to_avoid":"Provide explicit guidance on the required structure and format for successful input parsing.","description":"Ensure instructions specify precise file path and content formatting for successful execution."}}}
{"name":"Read_File","description":"Read_File: Use this tool to read a file's contents via the GitHub API. Provide a relative file path without a leading slash, e.g., 'some_dir/my_file.py'. Paths must match existing files in the repository. Validate paths externally or by invoking the tool multiple times for accurate results. Example: 'src/main/java/com/example/servlets/HelloServlet.java'.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't clarify that paths should start with a specific prefix or format, causing confusion and incorrect inputs.","how_to_avoid":"Specify the required prefix or format for the file path explicitly, ensuring users understand the correct input structure.","description":"Enter a relative file path starting with 'src/', excluding a leading slash, e.g., 'src/some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update a GitHub file's contents. Input format: file path (no leading slash), then 'OLD <<<< old content >>>> OLD', and 'NEW <<<< new content >>>> NEW'. Validate inputs and use multiple invocations to ensure accuracy.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on how to detail file changes, leading to incorrect argument parsing.","how_to_avoid":"Provide clear instructions on specifying file paths and changes with precise syntax for expected input.","description":"Clearly specify file paths and detailed changes using the exact syntax provided."}}}
{"name":"Delete_File","description":"Delete_File: This tool deletes a file from a GitHub repo using the GitHub API. Provide the full file path as a plain string without a leading slash, e.g., 'some_dir/my_file.py'. Validate paths before use. Tool can be invoked multiple times to check file system state.","fields":{"instructions":{"problems_with_current_description":"The current description allows paths that start with a slash, leading to incorrect inputs.","how_to_avoid":"Clarify that the path must not start with a slash or contain slashes.","description":"Provide a relative file path without starting slashes, e.g., 'some_dir/my_file.py'. Only input a string."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides an overview of all existing files in the main branch, listing file names, paths, and summaries. It does not support specific directory queries. Use it for a complete repository overview. Invoke multiple times for accurate validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on when to provide input, leading to incorrect or empty args.","how_to_avoid":"Specify that no input is required unless explicitly prompted by a certain type of request.","description":"Leave empty unless specific directory details are requested."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Change the active branch in a repository using the exact branch name as a string. Specify the branch name directly, like 'feature_branch'. Avoid synonyms or extra context. The tool can be invoked multiple times to verify changes. Example: {'instructions':'feature_branch'}.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what is expected as input and does not guide users on using branch names in context.","how_to_avoid":"Clarify that input should be a branch name for switching repository contexts, and specify format or context if necessary.","description":"Specify the branch name to switch the repository context, e.g., 'main', 'dev_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: Use this tool to create a new repository branch. Provide the branch name as a single string (e.g., 'my_branch') without additional text. Example: 'feature_branch_6'. The tool can be repeatedly invoked to validate the file system state.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and does not specify that the input should strictly be a valid branch name without any additional commands or context.","how_to_avoid":"Clarify that the input must be a standalone branch name, without any additional words or context.","description":"Enter only the desired branch name, without additional text or context."}}}
{"name":"Get_files_from_a_directory","description":"Fetch a list of all files in a specified directory by providing a valid directory path as a string input. Only input directory paths, not file paths. Avoid trailing slashes unless necessary. The tool can be invoked multiple times for ongoing validation. Example: 'src/main/java/com/example'.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't explicitly differentiate between directory and file paths, leading to incorrect inputs.","how_to_avoid":"Clarify the description by providing examples of both directory and file paths, emphasizing the need for precise input.","description":"Input a directory path as a string, e.g., 'some_dir/inner_dir', excluding parameter names."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues or pull requests by providing a precise search term as a string. Example: 'Bug in login feature'. Avoid open-ended questions. Can be invoked multiple times for comprehensive searches.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and doesn't specify the expected format or structure of the query.","how_to_avoid":"Clarify that the query should be a concise, keyword-focused phrase related to the issue title or topic.","description":"Enter a concise, keyword-focused phrase summarizing your issue or topic for a natural language search."}}}
{"name":"Create_review_request","description":"Create_review_request: Create a review request on the open pull request of the current branch. Specify the GitHub username as a lowercase string with underscores, e.g., 'user_name'. Invoking the tool multiple times helps validate the system state. Example: 'Request review from code_checker on the current pull request.'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on valid username formats, causing confusion over the correct structure required for successful prompts.","how_to_avoid":"Specify that the username must follow a specific format, like 'name_identifier', to ensure proper recognition and extraction.","description":"Enter a GitHub username in 'name_identifier' format, e.g., 'anna_dev'."}}}

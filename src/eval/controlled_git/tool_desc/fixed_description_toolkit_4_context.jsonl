{"name":"Get_Issues","description":"Get_Issues: Fetch the titles and numbers of the last 5 repository issues without input. Avoid querying specific issue numbers or IDs. Invoke the tool multiple times for updated results. Examples: 'List recent issue titles.' or 'Show last 5 issues.'","fields":{"instructions":{"problems_with_current_description":"The current description doesn't clarify how to provide the necessary input format or context, leading to failed prompts.","how_to_avoid":"Specify clear input requirements and expected prompt structure to guide users in crafting valid queries.","description":"No input needed; ensure prompts specify a valid issue identifier format."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetches title, body, and comments of a specific issue. Input must be an integer (e.g., 42) without additional text or symbols. For accurate results, ensure format adherence. The tool can be invoked multiple times to validate the file system state.","fields":{"instructions":{"problems_with_current_description":"The current description does not specify the exact expected format, leading to ambiguity in processing.","how_to_avoid":"Specify that only numeric issue numbers without additional text should be used.","description":"Provide a plain integer for the issue number, e.g., `42`."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use for commenting on GitHub issues. Input must start with an integer issue number (no leading zeros or text), followed by two newlines, then your comment. Validate inputs to prevent errors. Example: '3\\n\\nPlease review changes.' Use sparingly to avoid clutter.","fields":{"instructions":{"problems_with_current_description":"The current description lacks specificity, leading to incorrect input formatting and invocation failures.","how_to_avoid":"Specify exact input formatting requirements, such as using numeric issue identifiers and structured comments.","description":"Ensure input follows strict formatting: numeric issue identifiers and clear, structured comments."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of all files in a pull request by inputting the PR number as a plain integer (e.g., 12). Do not include text like 'PR number' or symbols. The tool can be invoked multiple times to check file states. Example: Input '5' to fetch files for PR number 5.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the required input format, leading to misinterpretation and incorrect input extraction.","how_to_avoid":"Specify that the input must be an integer without additional text or symbols, ensuring clarity on required input format.","description":"Provide the PR number as a standalone integer, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetch the full text of all files in a pull request by providing the PR number as an integer (e.g., '12'). Do not include prefixes like 'PR'. This tool can be invoked multiple times to validate file system state. Example of valid input: '12'.","fields":{"instructions":{"problems_with_current_description":"The description doesn't clarify that the PR number should strictly be an integer without any prefixes like 'PR' or 'pull request'.","how_to_avoid":"Explicitly state that only the numerical part of the PR should be used, excluding any text prefixes.","description":"Enter the PR number as a standalone integer, excluding any text prefixes."}}}
{"name":"Create_File","description":"Create_File Tool: Create files in GitHub repos by specifying a file path (no leading slash) followed by two newlines, then the file content. Validate inputs match this format to avoid errors. Supports multiple invocations for state validation. Example: 'src/main/MyFile.java\n\npublic class MyFile {}'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected format, leading to incorrect input processing.","how_to_avoid":"Clearly specify the format requirements and provide examples for accurate adherence.","description":"Ensure instructions strictly follow the specified format: 'filepath\\n\\ncontent'."}}}
{"name":"Read_File","description":"Use Read_File to read file contents via the GitHub API. Provide the relative file path without a leading slash, e.g., 'some_dir/my_file.py'. Ensure paths are accurate and relative to the repository root. The tool can be invoked multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"Users are providing file paths starting with a slash, which are not allowed, leading to incorrect arguments.","how_to_avoid":"Explicitly specify that paths should be relative, not absolute, to prevent starting with a slash.","description":"Provide a relative file path to read, without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: A GitHub API wrapper for updating file contents. Input must include a non-slash-starting file path, and contents to replace must be wrapped in OLD <<<< >>>> OLD and NEW <<<< >>>> NEW. Validate input format before submission. Use multiple invocations for consistent file state checks. Example: test/test.txt OLD <<<< old contents >>>> OLD NEW <<<< new contents >>>> NEW.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on formatting and structure, causing failures in generating correct output.","how_to_avoid":"Clearly specify the required format and include examples to guide the user in structuring the instructions correctly.","description":"Adhere to the specified format: file path, unchanged lines, OLD <<<<old contents>>>> OLD, NEW <<<<new contents>>>> NEW."}}}
{"name":"Delete_File","description":"Delete_File: Use this tool to delete a file from a GitHub repository. Input only the exact file path as a string, such as 'dir/subdir/file.py'. Ensure no leading slash. Validate actions by invoking the tool multiple times.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about the expected input format and does not specify that the input should be a relative path within a repository.","how_to_avoid":"Clarify that the input should be a relative path within a repository without a leading slash, ensuring users understand the expected input format.","description":"Provide the relative file path within the repository, without a leading slash, for the file you want to delete."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides an overview of all files in the main branch, listing file names, paths, and summaries. It doesn't support directory-specific queries. Invoke multiple times for various directories. No input required.","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity on when input is necessary, leading to incorrect argument generation for certain prompts.","how_to_avoid":"Clarify that empty input is expected when no specific directory detail is requested.","description":"No input needed unless a specific directory overview is explicitly requested."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch to a repository branch using its exact name as a string, like `git checkout <branch_name>`. Provide only the branch name as input. Example: {'instructions':'feature_branch'}. Re-invoke for validation.","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous and doesn't clearly specify that it requires an exact branch name string, causing incorrect input interpretations.","how_to_avoid":"Clarify that the input should be the exact branch name string, without additional words or phrases.","description":"Exact branch name to switch to, e.g., 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create a new branch by specifying the branch name as a plain string, e.g., 'my_branch'. Avoid using additional text or formatting. Repeated invocations are allowed for state verification. Examples: 'Create_a_new_branch: my_branch'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on required formatting and does not specify that it should include the full branch creation command.","how_to_avoid":"Specify that users must include the full command for branch creation, not just the branch name.","description":"Provide the full command to create a branch, including the branch name."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Fetch a list of files in a specified directory by providing only the directory path as a string, e.g., 'some_dir/inner_dir'. Avoid additional text. Validate paths for accuracy. The tool can be invoked multiple times.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on specifying directory paths and does not guide users on how to structure their input correctly.","how_to_avoid":"Provide clear guidance on inputting paths directly as strings without additional instructions or parameter names.","description":"Enter the directory path as a string, e.g., 'some_dir/inner_dir', without additional text or parameter names."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests in a repository. Input must be a specific string query. Example: 'Bug in login feature'. Avoid vague queries. The tool can be invoked multiple times for comprehensive results.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and doesn't clearly specify the type or scope of the query required.","how_to_avoid":"Clarify that the input should be a specific and concise search query related to an issue or topic.","description":"Enter a specific issue or topic query, e.g., 'Challenges when switching to Java 11'."}}}
{"name":"Create_review_request","description":"Create_review_request: This tool creates a review request on the open pull request matching the current active branch. Specify the GitHub username of the reviewer as a string, e.g., 'my_username'. Ensure the username is valid. The tool can be invoked multiple times to check file system state changes.","fields":{"instructions":{"problems_with_current_description":"The current description is not clear about what constitutes a valid GitHub username, leading to mismatches in expected arguments.","how_to_avoid":"Clarify that the username must be an exact match with the GitHub user's handle, distinguishing it from other text or identifiers.","description":"Exact GitHub username requested, exactly as registered, e.g., `my_username`."}}}

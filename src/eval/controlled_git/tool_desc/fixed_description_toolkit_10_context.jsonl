{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of 5 issues from a repository. No input required. Invoke without arguments to avoid errors. Can be used multiple times to check for new issues. Example: Simply call Get_Issues() without parameters.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the necessary input format, leading to misinterpretation and incorrect argument handling.","how_to_avoid":"Provide a clearer description specifying that the field requires no user input, ensuring users understand to leave it empty.","description":"Leave this field empty; no input is required."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comment thread of a specific issue by specifying the issue number as an integer only (e.g., 42). Avoid any additional text or symbols. The tool can be invoked multiple times to ensure accuracy and consistency.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the expected format, causing ambiguity when parsing user input with various issue number representations.","how_to_avoid":"Specify that the tool expects the issue number to be an integer input without any additional symbols or words.","description":"Enter the issue number as a plain integer (e.g., 42) without any symbols or text."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to comment on a GitHub issue by providing an integer issue number, two newlines, and your comment. Avoid non-integer issue numbers or mixing formats. Validate inputs and invoke the tool multiple times for consistent results. Example: '2\\n\\nPlease update dependencies.'","fields":{"instructions":{"problems_with_current_description":"The description lacks specificity, leading to formatting errors in agent invocations.","how_to_avoid":"Clarify formatting requirements, specify use of numeric issue identifiers and structured comment format.","description":"Ensure prompts use numeric issue identifiers and follow structured comment format."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch full text of all files in a pull request by providing the PR number as a plain integer (e.g., 12). Avoid prefixes like 'PR' or '#' when entering the number. This tool can be invoked multiple times for consistent results. Example: Provide '7' for PR number 7.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and doesn't clarify the expected format or context for inputting the PR number.","how_to_avoid":"Clarify that the PR number should be input as a plain integer without any additional characters or labels.","description":"Enter the pull request number as a plain integer, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: This tool retrieves the full text of all files in a PR. Input strictly the PR number as an integer (e.g., 12). Avoid additional text or formats. Re-run the tool as needed for file system validation. Examples: `12` or `5` (Integers only).","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on acceptable input format, leading to confusion between PR and number inputs.","how_to_avoid":"Specify that the input should be a standalone integer without any additional text or prefixes like 'PR'.","description":"Provide the pull request number as a standalone integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File: Use this tool to create a file in a GitHub repository. Input must be a single string with the file path (no leading slash) on the first line and content on the second. Example: 'dir/file.txt\\nFile content'. Invoke multiple times for better validation. Avoid leading slashes and ensure correct format.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the exact formatting requirements, leading to incorrect prompt parsing.","how_to_avoid":"Specify the precise format needed for instructions, ensuring users understand the structure required for successful parsing.","description":"Ensure input is structured as 'filepath\\n\\ncontent'."}}}
{"name":"Read_File","description":"Read_File: Use this tool to read a file's contents via GitHub API. Provide the full file path without a leading slash, e.g., 'some_dir/my_file.py'. Ensure paths are valid/accessible. You can invoke the tool multiple times for better validation of file system state. Example: 'src/main/java/MyClass.java'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the requirement that paths should not start with 'src/'.","how_to_avoid":"Clarify that the file path must exclude 'src/' at the beginning.","description":"Specify a file path without starting with 'src/', e.g., 'main/java/com/example/servlets/MyFile.java'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update a file in a GitHub repository by specifying the file path (no leading slash) and wrapping old/new content in OLD <<<<...>>>> OLD and NEW <<<<...>>>> NEW. Validate input format before execution. This tool can be invoked multiple times for checking file system state.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not specify the format or structure required for the instructions.","how_to_avoid":"Clearly define the format required for instructions, including examples of expected input structure.","description":"Specify changes using 'OLD <<<< old text >>>> OLD NEW <<<< new text >>>> NEW' format, maintaining file paths."}}}
{"name":"Delete_File","description":"Delete_File: Use this tool to delete a file from a GitHub repository by providing the complete file path, ensuring it does not start with a slash, e.g., 'dir/file.py'. Clearly specify 'delete' in your request. You may invoke the tool multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't clarify the required context or intent, leading to incorrect input and interpretation.","how_to_avoid":"Clarify that the path should be within a local context and explicitly state to include the GitHub context.","description":"Specify the full file path excluding initial slash and GitHub context, e.g., 'repo_dir/some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides a complete overview of all files in the main branch, listing file names, paths, and summaries. It does not accept specific directory queries. Use it to understand the entire repository structure. Invoke multiple times for thorough validation of the file system state. No input is required.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity, leading to confusion about when specific instructions are required, resulting in failures.","how_to_avoid":"Clarify that instructions are not needed for directory structure requests or overview queries.","description":"No instructions needed for directory structure or overview requests; use empty string."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch the repository to a specific branch using its exact name as a string input (e.g., 'main'). Ensure the name matches an existing branch. Repeat to confirm the correct state. Examples: {'instructions': 'main'} or {'instructions': 'dev_branch'}.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on accepted branch naming conventions and expected context, leading to incorrect or ambiguous inputs.","how_to_avoid":"Specify exact branch names and clarify the expected format to improve input accuracy and reduce errors.","description":"Specify the exact branch name to switch to, such as 'main' or 'develop'."}}}
{"name":"Create_a_new_branch","description":"Create a new branch by providing a JSON object with 'instructions' as the key and the branch name as a string value. Example: {\"instructions\": \"feature_branch\"}. Ensure the input format is strictly followed. The tool can be invoked multiple times to check the repository state.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity, leading to incorrect interpretations and application of branch names.","how_to_avoid":"Provide a clearer instruction format that specifies exact input expectations and examples.","description":"Specify the exact branch name as a string, e.g., 'feature_branch_6'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Input the directory path as a simple string, e.g., 'some_dir/inner_dir'. Avoid adding commands. The tool lists files in the specified directory. Run multiple times for consistent filesystem checks.","fields":{"instructions":{"problems_with_current_description":"The description is unclear about how to format directory paths correctly, leading to inconsistent prompt responses.","how_to_avoid":"Clarify the expected input format and specify examples of correctly formatted directory paths.","description":"Input the directory path as a string, e.g., 'src/main/java'. Exclude the trailing slash and parameter name."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests by specifying a precise search query string, e.g., 'bug fix' or 'feature request'. Ensure the query is relevant to the repository content. The tool can be run multiple times for accurate results.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague, leading to unclear input expectations.","how_to_avoid":"Clarify that the input should be succinct and directly related to a specific issue or topic.","description":"Enter a concise natural language query related to your specific issue or topic."}}}
{"name":"Create_review_request","description":"Create_review_request: This tool creates a review request for a specified GitHub user on an open pull request of the current branch. Input must include a valid GitHub username as a string. Ensure an active pull request exists. Example: {'username':'valid_user'}. Invoke multiple times to validate file system state.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected format or guidelines for valid GitHub usernames.","how_to_avoid":"Specify the format or guidelines for GitHub usernames, ensuring consistency with real-world examples and tool usage.","description":"Enter the valid GitHub username associated with the user, e.g., 'username123', 'dev_name'."}}}

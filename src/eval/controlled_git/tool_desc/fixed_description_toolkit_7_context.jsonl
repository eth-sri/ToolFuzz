{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of the 5 most recent issues without input. No specific issue ID queries allowed. Invoke multiple times for updated lists. Example: 'Fetch recent issues.'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what constitutes valid input, leading to misinterpretation and inconsistent results.","how_to_avoid":"Clarify that the field should be left empty and ensure prompt examples align with this requirement.","description":"Leave empty; input not required for successful execution."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comment thread of a specific issue. Input must be a single integer issue number (e.g., 42). Avoid natural language or additional queries. Tool can be invoked multiple times for validation. Example: 'Get_Issue 42'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify that the input must be strictly an integer and not a string or a combination of words and numbers.","how_to_avoid":"Specify that the issue number must be provided as a whole integer without any additional characters or words.","description":"Provide the issue number strictly as an integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to comment on a GitHub issue. Input must be: <issue number as integer>\\n\\n<comment>. Ensure correct formatting to avoid errors. Tool can be invoked multiple times for validation. Examples: '1\\n\\nUpdate dependencies.', '2\\n\\nPlease review code.'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity, leading to misinterpretation of format requirements.","how_to_avoid":"Clearly specify the format requirements using concise and explicit instructions.","description":"Ensure input strictly follows specified format: use numeric issue identifiers (e.g., #1, #2)."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of all files in a PR by providing only the PR number as a plain integer, e.g., '12'. Avoid using hashtags, words, or symbols. You can invoke the tool multiple times for state checks. Examples: 'Fetch files from PR 12'.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear and doesn't specify the required format, leading to inconsistent inputs.","how_to_avoid":"Specify 'Enter the PR number as a valid integer without symbols or text prefixes.'","description":"Enter the PR number as a plain integer, e.g., 5."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetch text of all files in a PR using an integer PR number as input. Provide only the number, e.g., '12'. Avoid extra text or formatting. Example: Fetch files for PR 12. Can be invoked multiple times for validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on how to format the PR number, causing ambiguity in interpreting requests.","how_to_avoid":"Specify that the PR number should be provided as an integer without any prefixes or suffixes.","description":"Enter the pull request number as a plain integer, e.g., 12, with no additional characters."}}}
{"name":"Create_File","description":"Create_File: Use this tool to create files in GitHub repositories. Input must be a single string: specify the file path (no leading slash), followed by 2 newlines, then the file contents. Example: 'dir/file.txt\\n\\nfile content'. Invoke multiple times to ensure correct file system state.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks examples on how to format instructions correctly.","how_to_avoid":"Provide specific examples and clarify expected formatting for successful processing.","description":"Adhere to precise formatting: specify file path and content clearly, mirroring successful examples."}}}
{"name":"Read_File","description":"Read_File: Use this GitHub API wrapper to read file contents. Input should be a relative file path like 'some_dir/my_file.py'. Paths must not start with a slash, contain spaces, or special characters unless URL encoded. Invoke multiple times to check file system changes.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't clarify that paths should not include the leading directory structure starting with '/', causing incorrect path inputs.","how_to_avoid":"Specify that paths should only include the file name and local directory, omitting any leading directory structure or slashes.","description":"Provide a relative file path without leading directories or slashes, e.g., 'my_file.py' from 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update a file in a GitHub repo. Input must include: 1) file path (no leading slash), 2) OLD <<<<old content>>>> OLD, 3) NEW <<<<new content>>>> NEW. Validate format before submission. Example: 'path/to/file.txt\nOLD <<<<old>>>> OLD\nNEW <<<<new>>>> NEW'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the format and structure required for the instructions, leading to incorrect input parsing.","how_to_avoid":"Specify the exact format and elements needed in the instructions field to prevent ambiguity and ensure correct input parsing.","description":"Provide file path and specify changes using 'OLD <<<< old text >>>> OLD NEW <<<< new text >>>> NEW' format."}}}
{"name":"Delete_File","description":"Delete_File: Use this tool to delete a file in a GitHub repo by providing the file path without a leading slash, e.g., 'dir/file.py'. Only input the path string. Invoke multiple times for file system validation. Examples: 'src/Example.java'.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about the format and structure expected, leading to confusion and incorrect input formatting.","how_to_avoid":"Clarify the input format requirements, specifically stating that the file path should not include a leading slash and should be relative.","description":"Enter the relative file path to delete, omitting the leading slash, e.g., 'some_dir/my_file.py'. Input must be a string."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides an overview of all files in the main branch, listing file names, paths, and summaries. It does not support directory-specific queries. Use general commands. Invoke multiple times for updated views.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on when specific instructions should be provided, leading to ambiguity in input requirements.","how_to_avoid":"Clarify when specific instructions are necessary by emphasizing conditions or scenarios that require input.","description":"Specify only directory name for structure details; no input needed for general overview."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch the active branch in the repository by providing the branch name as a string, e.g., \"dev_branch\". Ensure the branch name is accurate. The tool can be invoked multiple times to verify the repository's state. Examples: \"Set to 'main'\", \"Switch to 'feature_branch_2'\".","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clarify the expected input format, causing incorrect or inconsistent branch names to be used.","how_to_avoid":"Specify the required format and constraints for the branch name, ensuring users understand the input should match existing branch names exactly.","description":"Input the exact name of the target branch as it appears in the repository (e.g., 'feature_branch_1')."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: Specify the branch name as a plain string, e.g., 'my_branch'. Avoid additional text or queries in input. Invoke the tool multiple times to validate the file system state. Example: 'feature_branch_1'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity, leading to ambiguous prompts and incorrect argument parsing.","how_to_avoid":"Provide a clear and concise description that specifies the expected input format for branch names.","description":"Specify the exact branch name to create, e.g., 'feature_update'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Fetch a list of files from a specified directory. Input must be a valid directory path as a plain string (e.g., 'some_dir/inner_dir'). Avoid adding extra instructions or formatting. Tool can be invoked multiple times for different directory paths. Example: 'List files in src/main/java'.","fields":{"instructions":{"problems_with_current_description":"The current description does not specify that the input must include a full directory path and exclude files.","how_to_avoid":"Clarify that the input should be a full path to a directory, not a file, to ensure correct parsing.","description":"Enter the full path to a directory (e.g., 'some_dir/inner_dir'). Exclude file paths and parameter names."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests in the repository. Input must be a specific search string related to repository content, e.g., 'bug fix' or 'feature request'. General questions are not supported. You can invoke the tool multiple times to refine results.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clearly specify the type of input expected.","how_to_avoid":"Clarify that the input should be a concise and specific issue title or topic.","description":"Enter a concise issue title or topic for natural language search, e.g., 'Java 11 migration challenges'."}}}
{"name":"Create_review_request","description":"Create_review_request: Initiates a review request for the open pull request on the active branch. Input the GitHub username (e.g., 'my_username') as a string parameter. Avoid spaces/special characters. The tool is re-invocable for state validation. Example: {'username':'code_checker', 'instructions':'Review the current branch.'}","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous, leading to misinterpretation about what constitutes a valid GitHub username format.","how_to_avoid":"Specify that the username should be a valid GitHub handle with alphanumeric characters, underscores, or hyphens.","description":"Enter a valid GitHub handle (alphanumeric, underscores, hyphens only) of the user being requested, e.g., 'my_username'."}}}

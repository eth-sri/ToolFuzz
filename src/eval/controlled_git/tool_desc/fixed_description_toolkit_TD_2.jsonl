{"name":"Get_Issues","description":"Get_Issues Tool: This tool retrieves a list of open issues from a specified repository, providing the title and issue number for up to 5 issues. It does not require any input parameters and is invoked without arguments. The tool is designed to return a snapshot of current issues, and it does not provide details beyond the title and issue number. Use this tool when you need a quick overview of the latest issues in a repository. It is important to note that the tool only fetches open issues and is limited to the first 5 issues in the list. Ensure the repository is accessible and has open issues for the tool to function correctly.","fields":{"instructions":{"problems_with_current_description":"The description is vague and does not clearly convey its purpose or usage.","how_to_avoid":"Clarify the purpose and specify that no input is needed by using clear language.","description":"No input required; leave the field empty (use an empty string)."}}}
{"name":"Get_Issue","description":"Get_Issue Tool Manual: This tool retrieves the title, body, and comment thread of a specified issue from a database or tracking system. To use this tool correctly, you must provide the issue number as an integer. Instructions for use: 1. The issue number should be a positive integer, for example, `42`. 2. Ensure that the issue number corresponds to an existing issue in the system. 3. Input the issue number directly as an integer without any additional characters or formatting. Allowed: Whole numbers like 42, 17, etc. Not allowed: Strings, decimals, or special characters (e.g., '42', 42.0, #42). This tool will only function correctly with valid integer inputs as described.","fields":{"instructions":{"problems_with_current_description":"The description is too vague and lacks clarity on what the integer represents.","how_to_avoid":"Specify that the integer is a unique identifier for tracking issues.","description":"Unique integer identifier for an issue, e.g., `42`."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool Manual:\n\nThis tool is designed to facilitate commenting on GitHub issues. To use this tool correctly, please adhere to the following input structure and guidelines:\n\n1. **Issue Number**: Begin your input with the GitHub issue number. This must be an integer value (e.g., 123).\n\n2. **Separator**: After the issue number, include two newline characters (i.e., press 'Enter' key twice). This is required to separate the issue number from your comment.\n\n3. **Comment**: Following the newlines, enter your comment. Ensure your comment is concise and relevant to the issue. Avoid unnecessary remarks to prevent cluttering the comment threads.\n\n4. **Formatting**: Your comment should follow the required formatting standards. For example, if specific syntax or markdown is expected, adhere to those guidelines strictly.\n\nExample Input:\n```\n123\n\nThis is a well-structured comment addressing the specific issue, formatted as required.\n```\n\n**Important Note**: Use this tool sparingly and only when necessary to maintain the clarity and relevance of the comment threads.","fields":{"instructions":{"problems_with_current_description":"Lacks specificity and clarity regarding the expected formatting.","how_to_avoid":"Provide clear, concise guidelines on the exact formatting required.","description":"Adhere strictly to specified formatting guidelines."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool automatically retrieves and lists the most recent 5 open Pull Requests (PRs) from a specified repository. It provides the title and PR number for each of these Pull Requests. No input is required from the user to execute this tool, as it operates with default settings to fetch the data. For instance, when activated, the output will be in the following format: [{\"title\": \"PR Title 1\", \"number\": 101}, {\"title\": \"PR Title 2\", \"number\": 102}, ..., {\"title\": \"PR Title 5\", \"number\": 105}].","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on usage.","how_to_avoid":"Provide specific guidance on input requirements and expected behavior.","description":"No input needed; leave as an empty string ('')."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR: This tool retrieves the full text of all files within a specified pull request (PR) based on the provided PR number. It is designed to assist in understanding and contributing to code changes in a PR. To use this tool correctly, please follow these guidelines: \n1. Input Parameter: You must provide the PR number, which should be a positive integer. For example, if the PR number is 12, input `12`.\n2. Only one input parameter is accepted: the PR number as an integer. No other parameters or data types are supported.\n3. Ensure the PR number corresponds to an existing pull request. Providing an invalid or non-existent PR number will result in an error.\n4. This tool does not modify any files or PRs; it only retrieves file content for review purposes.\n5. Example Usage: To fetch files from PR number 25, input the integer `25`.\nBy adhering to these guidelines, you can effectively use this tool to review code changes in pull requests.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what 'PR number' refers to.","how_to_avoid":"Specify that 'PR number' refers to a Pull Request identifier.","description":"The Pull Request (PR) identifier as an integer, e.g., `12`."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request Tool Description: This tool facilitates the creation of a new pull request in a GitHub repository. To use this tool effectively, adhere strictly to the following input format guidelines: \n\n1. **Title**: Begin with the title of the pull request. This should be a concise summary of the changes.\n\n2. **Newlines**: After the title, insert exactly two newline characters to separate the title from the body.\n\n3. **Body/Description**: Provide a detailed description of the pull request. Include relevant information such as what changes were made and why. \n\n4. **Referencing Issues**: When applicable, reference any related issues in the body using the syntax `closes #<issue_number>`. For example, `closes #3, closes #6`.\n\nExample input: If you wish to create a pull request titled 'README updates' with the description 'added contributors' names, closes #3', your input should be:\n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nEnsure all formatting rules are followed precisely to avoid errors in processing the request.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks details on what formatting is required.","how_to_avoid":"Specify the exact formatting requirements to prevent confusion.","description":"Ensure compliance with specified format guidelines for accurate processing."}}}
{"name":"List_Pull_Requests_Files","description":"The 'List_Pull_Requests_Files' tool allows users to retrieve the complete text of all files associated with a specific pull request (PR) by using the PR number as an input. This tool is designed to assist in reviewing code changes and contributions within a PR. To use this tool correctly, you must provide the PR number as an integer input parameter. For example, if the PR number is 12, simply input `12`. Ensure that the input is a valid integer corresponding to an existing PR; otherwise, the tool will not function as expected. This tool does not accept any other input types or formats.","fields":{"instructions":{"problems_with_current_description":"It lacks clarity on what 'PR' refers to, potentially causing confusion.","how_to_avoid":"Specify that 'PR' refers to 'Pull Request' in the description.","description":"The Pull Request (PR) number as an integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool: This tool is a wrapper for the GitHub API, designed to create files within a GitHub repository. **IMPORTANT USAGE INSTRUCTIONS**: \n\n1. **File Path**: You must specify the path of the file to be created. The path should be relative to the root of the repository and must not start with a slash. \n   - Example: 'folder/subfolder/filename.txt'\n\n2. **File Contents**: After specifying the file path, provide the contents you want to insert into the file. \n   - Example: 'This is the content of the file.'\n\n**Input Format**: Your input should be a single string containing two lines:\n   - First Line: The file path, without a leading slash.\n   - Second Line: The file contents.\n\n**Example Input**: If you want to create a file named 'example.txt' in a folder named 'docs' with the content 'Sample text', your input should be:\n\n   docs/example.txt\n   Sample text\n\n**Note**: Ensure that there are no unexpected line breaks or spaces in your input. Follow the format strictly to ensure successful file creation.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specific guidance on formatting requirements.","how_to_avoid":"Provide clear and concise instructions detailing the exact formatting standards to follow.","description":"Ensure all entries adhere to specified formatting guidelines."}}}
{"name":"Read_File","description":"Read_File Tool: This tool leverages the GitHub API to read the contents of a specified file. To use this tool correctly, provide the full file path as a string. The path should not begin with a leading slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. Ensure the file path is relative to the repository's root directory. Incorrect usage, such as starting the path with a slash or providing an invalid path, will result in an error. This tool is designed to facilitate reading file contents efficiently, so adhering to the correct format is crucial for successful operation.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and focuses on what not to do rather than what to do.","how_to_avoid":"Emphasize the correct format and avoid negative instructions.","description":"Specify a relative file path without a leading slash, e.g., 'dir/file.py'."}}}
{"name":"Update_File","description":"Update_File: This tool is a wrapper for the GitHub API, designed to update the contents of a file in a GitHub repository. To use this tool correctly, follow the steps below. **IMPORTANT**: Ensure your input strictly follows the specified format to avoid errors.\n\n1. Specify the file to modify by providing the full file path. **Note**: The path must not start with a slash.\n\n2. Indicate the old contents you wish to replace. Wrap this section in the following format:\n   OLD <<<<\n   [old contents]\n   >>>> OLD\n\n3. Specify the new contents to replace the old contents. Wrap this section in the following format:\n   NEW <<<<\n   [new contents]\n   >>>> NEW\n\nHere is an example of how to format your input:\n\n```\ntest/test.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n```\n\nAdhering to this format will ensure proper execution of the tool. Avoid starting the file path with a slash and ensure that the old and new content sections are clearly wrapped as demonstrated.","fields":{"instructions":{"problems_with_current_description":"Vague and lacks clarity on what rules are being referred to.","how_to_avoid":"Specify the context or type of rules to follow for clarity.","description":"Adhere strictly to the specified guidelines."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool is used to delete a file in a GitHub repository via the GitHub API. To use this tool, you must provide the exact file path of the file you want to delete, without a leading slash. Example: 'some_dir/my_file.py'. Do not include parameter names, only the path as a string. Authentication with the GitHub API is required, so ensure you have the necessary permissions to delete files in the repository. This tool does not handle authentication; you must manage it externally. If you encounter errors, verify the file path format and authentication credentials. This tool is intended for users familiar with GitHub repository management.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and lacks clarity about the requirements.","how_to_avoid":"Use simple and direct language to specify the criteria for the input string.","description":"Enter the file path, excluding a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"Description: This tool provides a comprehensive overview of all existing files in the main branch of a repository. It outputs a list of file names, their respective paths, and a brief summary of each file's contents. This information helps users understand the structure and content of the repository, especially useful for navigating large codebases. Usage Instructions: No input parameters are required to use this tool. Simply invoke the tool, and it will automatically generate the overview. Output Format: The tool outputs a structured list of files with their paths and summaries. Limitations: This tool is specifically designed for examining the main branch of a repository and does not support other branches or input parameters.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the expected input.","how_to_avoid":"Provide a precise description indicating no input is necessary.","description":"No input needed; use an empty string ('') as the default."}}}
{"name":"List_branches_in_this_repository","description":"List_branches_in_this_repository: This tool retrieves and returns a list of all branch names in the specified repository without requiring any input parameters. To use this tool correctly, simply invoke it with an empty string as input (e.g., `''`). The tool will output a list of strings, with each string representing the name of a branch in the repository. This operation is read-only and will not modify the repository in any way. Ensure that you have the necessary permissions to access the repository's branch information before using this tool.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks clarity on what it means by 'no input required'.","how_to_avoid":"Specify that the field should be left blank or filled with an empty string.","description":"Leave blank or use an empty string: \"\"."}}}
{"name":"Set_active_branch","description":"Set_active_branch: This tool is used to set the active branch in a given repository, akin to executing a `git checkout <branch_name>` or `git switch <branch_name>` command in Git. To use this tool correctly, you must provide the exact name of the branch you wish to switch to as a string input parameter. Constraints: The branch name must be a valid string that corresponds to an existing branch in the repository. Example usage: If you want to switch to a branch named 'feature_branch', you should input the branch name as a string like this: 'feature_branch'. Ensure there are no typos or invalid characters in the branch name to avoid errors.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks detail about the purpose or context of 'my_branch'.","how_to_avoid":"Clarify the context and specify what 'my_branch' represents, such as a version or feature branch in a repository.","description":"Specify the branch name used in version control systems, such as 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool facilitates the creation of a new branch in the repository. Input Parameter Guidelines: You must specify the name of the new branch as a string input parameter. The branch name should be a valid Git branch name. Allowed Characters: Alphanumeric characters, dashes (-), underscores (_), and slashes (/). Example of a valid branch name: 'feature/new-feature'. Constraints: The branch name should not start with a slash (/) or contain consecutive slashes (//). It should not end with a dot (.) or contain special characters other than those allowed. Incorrect Usage Examples: 'feature//new', '/startWithSlash', 'endWithDot.', '@invalidChar'. Ensure the branch name adheres to these guidelines to avoid errors.","fields":{"instructions":{"problems_with_current_description":"The original description is vague and lacks context about what the branch name is used for.","how_to_avoid":"Clarify the purpose and context of the branch name in the description.","description":"Specify the branch name for version control, e.g., 'my_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory Tool: This tool retrieves a list of all files from a specified directory. To use this tool correctly, provide the directory path as a single string input parameter. The input must be a valid path to a directory and should be formatted as a string with forward slashes separating directory names (e.g., 'some_dir/inner_dir'). Ensure that the input is solely the path string without including parameter names or additional characters. Avoid using backslashes or any non-standard path formats. This tool does not support wildcards or relative paths outside the specified directory structure. Ensure the directory exists and is accessible.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear and doesn't specify the format or purpose of the input string.","how_to_avoid":"Clarify the format and use of the input string for better understanding.","description":"Enter a directory path as a string, e.g., 'some_dir/inner_dir'. Exclude the parameter name."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool searches for issues and pull requests within a specified repository. To use this tool correctly, you must provide a search query as a string input parameter. The search query should be a clear and concise natural language phrase or keywords that describe the issue or pull request you are looking for. For example, you can use queries like 'bug in login feature', 'enhancement request for UI', or 'documentation update'. Ensure your query is relevant to the content you want to find. Avoid overly long or complex queries that may not yield specific results. The search is case-insensitive and supports typical search operators like AND, OR, and NOT for more refined results. Make sure to enclose your query within quotes to maintain it as a string input.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the expected input format.","how_to_avoid":"Specify the type of input expected, such as keywords or phrases, for improved precision.","description":"Enter a natural language search query, like a specific issue title or topic."}}}
{"name":"Create_review_request","description":"Create_review_request Tool: This tool facilitates creating a review request for an open pull request that corresponds to the current active Git branch. Usage Instructions: 1. Ensure you are on the correct active branch with an open pull request. 2. Specify the GitHub username of the person you wish to request a review from. This should be provided as a string input parameter, for example, 'username123'. 3. The username must be a valid GitHub account name and should not include any special characters or spaces. 4. The tool will then create a review request for the specified user on the relevant pull request. Note: This tool does not support batch requests and should be used for one review request at a time.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the input format.","how_to_avoid":"Specify the exact input format and provide a clear example.","description":"Enter the GitHub username, such as 'my_username', for the user being queried."}}}

{"name":"Get_Issues","description":"Get_Issues: Fetch titles and numbers of the latest 5 repository issues without input. Use consistent terminology, e.g., 'issue ID'. Invoke multiple times if needed. Example: 'What are the latest issue titles?'","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous, leading to confusion about when and how the tool should be used, causing frequent incorrect inputs.","how_to_avoid":"Clarify that the field requires no input by emphasizing the expectation of an empty string, reducing the likelihood of incorrect entries.","description":"No input is needed; always use an empty string ('') to indicate this field."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comments of a specific issue. Input must be an integer issue number, e.g., 42. Avoid non-numeric formats or additional text. The tool supports multiple invocations to validate the file system state. Example: 'Get_Issue 42'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the format required, leading to misinterpretation of the input.","how_to_avoid":"Specify that inputs should strictly be integer values without any additional characters or symbols.","description":"Enter the issue number as a standalone integer, e.g., 42, without any prefix or suffix."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to comment on a GitHub issue. Input must be formatted as: an integer issue number, two newlines, then your comment. Follow strict formatting to avoid errors. Invoke multiple times for file system state validation. Example: '42\\n\\nPlease update dependencies.'","fields":{"instructions":{"problems_with_current_description":"The instructions are unclear, leading to incorrect formatting and invocation failures.","how_to_avoid":"Specify the exact format requirements and provide clear examples for correct input.","description":"Use precise formatting: include specific issue numbers and concise comments."}}}
{"name":"Overview_of_files_included_in_PR","description":"Use this tool to fetch full text of files in a pull request by providing the PR number as an integer. Avoid adding text or symbols. Example: '5' for PR 5. Validate input format. Tool can be invoked multiple times for consistency checks.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify the required format for specifying the PR number, leading to incorrect input parsing.","how_to_avoid":"Specify that the PR number must be provided as a plain integer without any prefix or format.","description":"Provide the PR number as a plain integer without any prefix, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetch the full text of all files in a pull request by providing the PR number as an integer only (e.g., 12). Do not prefix with 'PR' or any text. Use direct integer input for successful operation. Example: To fetch files from PR 12, input '12'. The tool can be invoked multiple times to verify file system state.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify that only the numeric portion of the PR number should be provided, leading to input errors.","how_to_avoid":"Specify that the input should be a pure integer without any prefixes or additional text.","description":"Provide only the numeric value of the pull request number, e.g., `12`."}}}
{"name":"Create_File","description":"Create_File Tool: Use this tool to create files in a GitHub repo. Input format: 'file_path\\n\\nfile_contents'. Do not start the path with a slash. Example: 'src/Main.java\\n\\npublic class Main {}'. Validate inputs for correctness. Multiple invocations are allowed for better validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on required formatting details, leading to misunderstanding and incorrect prompt structuring.","how_to_avoid":"Provide explicit formatting guidelines and examples to ensure the user understands the precise structure needed.","description":"Ensure instructions are formatted precisely as specified for correct processing."}}}
{"name":"Read_File","description":"Read_File: Use this tool to read a file's contents via the GitHub API by providing a relative file path, not starting with a slash. Validate paths for accuracy and invoke the tool multiple times to confirm the file system state. Example: 'some_dir/my_file.py'.","fields":{"instructions":{"problems_with_current_description":"The current description fails to prevent paths starting with a slash, leading to incorrect file path formatting.","how_to_avoid":"Explicitly instruct users to omit the leading slash for all file paths.","description":"Specify the file path without a leading slash, e.g., `some_dir/my_file.py`."}}}
{"name":"Update_File","description":"Update_File: Use this GitHub API wrapper to update files in a repository. Input must strictly follow: specify file path (no leading slash), then old content within OLD <<<< >>>> OLD, then new content within NEW <<<< >>>> NEW. Validate inputs carefully. Invoke multiple times if needed.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on format and content requirements, leading to incorrect instructions.","how_to_avoid":"Specify the format, including file path and changes with clear markers for old and new content.","description":"Clearly specify file path and format changes using 'OLD' and 'NEW' markers."}}}
{"name":"Delete_File","description":"Delete_File: Use this tool to delete a file in a GitHub repository by providing the exact file path as a string, e.g., 'some_dir/my_file.py'. Ensure the path doesn't start with a slash. Avoid questions or additional context. The tool can be invoked multiple times for state validation. Example: 'src/main/java/com/example/servlets/ExampleProcessor.java'.","fields":{"instructions":{"problems_with_current_description":"The description is unclear, leading to misinterpretation of input format, especially regarding path notation and parameter inclusion.","how_to_avoid":"Clarify the format and explicitly state no additional parameters should accompany the file path string.","description":"Provide the file path to delete without leading slashes or extra parameters, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"Provides an overview of all files in the main branch, listing names, paths, and brief summaries. Does not support specific directory queries. Run multiple times for consistent file system validation. Example: 'What files exist in the main branch?'","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly indicate that no user input is needed, leading to inappropriate prompts.","how_to_avoid":"Clarify that the field should remain empty and does not require any user-generated input.","description":"Leave this field empty; no user input required."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch the active repository branch, similar to 'git checkout <branch_name>'. Input must be the exact branch name as a string, e.g., 'main'. Avoid vague terms like 'default'. Validate branch existence before invoking. For example, 'Set_active_branch: main'. The tool can be used multiple times to ensure branch switching success.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity, leading to confusion about acceptable branch name formats and resulting in incorrect arguments or invocation failures.","how_to_avoid":"Provide clear guidance on the expected format and context for the branch name, improving prompt recognition and reducing errors.","description":"Specify the exact branch name to switch to or activate, such as 'feature_branch_1'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: Creates a new repository branch. Input the branch name directly as a string, e.g., 'feature_branch'. Avoid indirect language. Example: Create_a_new_branch('my_branch'). This tool can be invoked multiple times to validate the file system state.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on how to specify the branch name, leading to user confusion and incorrect inputs.","how_to_avoid":"Provide clear instructions on formatting the branch name to ensure users understand how to input it correctly.","description":"Specify the exact name for the new branch as a string, e.g., 'feature_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Fetch a list of all files from a specified directory by providing its path as a plain string (e.g., 'some_dir/inner_dir'). Ensure no additional text or parameters are included. The tool can be invoked multiple times to verify the file system state.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly specify the need to only provide the directory path without any additional text or context.","how_to_avoid":"Emphasize that only the raw directory path should be provided, without any additional instructions or context.","description":"Input the directory path as a plain string, e.g., 'some_dir/inner_dir', without additional text."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find specific issues or pull requests in a repository. Input a precise string query like 'Issue on Java 11 migration' as the parameter. Avoid vague queries; specify titles or topics. Invoke the tool multiple times for thorough results.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clearly specify the expected input format.","how_to_avoid":"Clarify the input format and provide examples to guide users.","description":"Enter a concise query describing your issue or topic, e.g., 'Switching to Java 11 challenges'."}}}
{"name":"Create_review_request","description":"Create a review request for the current branch's open pull request by specifying the exact GitHub username of the reviewer. Input must be a valid GitHub username. Re-invoke the tool to confirm file system state. Example: Request a review from 'exact_username'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify that the GitHub username should be extracted from the prompt, leading to misinterpretation by the parser.","how_to_avoid":"Specify that the field should capture the GitHub username directly mentioned in the prompt to avoid confusion.","description":"Extract the GitHub username directly mentioned in the prompt, e.g., `username` in `Is there an open pull request that needs a review from username?`."}}}

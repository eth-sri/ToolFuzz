{"name":"Get_Issues","description":"Fetch the latest 5 issues from a repository, returning titles and issue numbers. This tool takes no input and cannot fetch specific issue numbers. It can be invoked multiple times if needed. Example: 'Fetch the latest issues.'","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the purpose and usage of the field.","how_to_avoid":"Provide a concise explanation emphasizing the field's requirement and purpose.","description":"Field requires no input; use an empty string ('') as default."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comment thread of a specific issue by specifying only the issue number as an integer. Example: '42'. Avoid any prefixes or additional text. The tool supports multiple invocations for validation.","fields":{"instructions":{"problems_with_current_description":"Current description lacks clarity on the field's purpose and valid range.","how_to_avoid":"Clarify the field's role and specify acceptable integer values.","description":"Enter the issue number as a positive integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: Use this tool to add comments to GitHub issues. Input must start with an integer issue number, followed by two newlines, then your comment. Avoid non-integer issue numbers or incorrect formatting. You can invoke this tool multiple times to ensure correct input format. Example: '4\\n\\nPlease test the new feature.'","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks clarity on what formatting is required.","how_to_avoid":"Specify clear and concise formatting requirements for better understanding.","description":"Ensure adherence to specified formatting guidelines."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of all files in a pull request by providing the PR number as an integer (e.g., 5). Avoid any additional text or symbols. The tool can be invoked multiple times for consistent validation. Example: 'Fetch files for PR 8'.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on what 'PR' refers to, which may confuse users.","how_to_avoid":"Define 'PR' and specify its relevance to the tool's function.","description":"Enter the pull request (PR) number as an integer, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetch the full text of all files in a pull request using only the PR number as an integer input, e.g., `12`. Ensure no additional text is included. Repeat invocation if necessary to validate file system state. Examples: `12`, `34`.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what 'PR number' refers to.","how_to_avoid":"Specify that 'PR number' refers to a pull request identifier in a software repository.","description":"The pull request (PR) identifier as an integer, e.g., '12'."}}}
{"name":"Create_File","description":"Create_File: Use to create files in GitHub. Format input as 'path/to/file.txt\\n\\nfile content'. Do not start the path with '/'. Validate input structure. Tool allows multiple invocations for better file system validation. Example: 'src/file.txt\\n\\nHello World'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specifics about formatting requirements.","how_to_avoid":"Provide detailed guidelines on the exact formatting needed for compliance.","description":"Adhere strictly to specified formatting guidelines."}}}
{"name":"Read_File","description":"Read_File: A GitHub API wrapper for reading file contents. Provide the full file path, ensuring it does not start with a slash, e.g., 'directory/my_file.py'. For validation, invoke the tool multiple times to check the file system state. Avoid paths like '/directory/my_file.py'.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and lacks clarity regarding the file path requirement.","how_to_avoid":"Use concise language to specify the file path should be relative and not start with a slash.","description":"Specify a relative file path without a leading slash, e.g., 'dir/file.py'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update file contents in a GitHub repo. Input format: file path (no leading slash), OLD <<<<old content>>>> OLD, NEW <<<<new content>>>> NEW. Validate inputs with these rules to prevent errors. Invoke multiple times for file system checks.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity and specificity regarding the rules.","how_to_avoid":"Specify the rules and expected outcomes more clearly.","description":"Adhere strictly to the specified guidelines."}}}
{"name":"Delete_File","description":"Delete_File: Use this tool to delete a file in a GitHub repository. Provide the file path as a string without a leading slash. Ensure instructions explicitly specify file deletion. Verify input format before use. Example: 'Delete some_dir/my_file.py'.","fields":{"instructions":{"problems_with_current_description":"The description is verbose and may confuse users about input format.","how_to_avoid":"Simplify the description and clearly specify the input requirement.","description":"Specify the file path to delete, without a leading slash, e.g., 'dir/file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides an overview of all files in the main branch, listing file names, paths, and content summaries. Avoid specifying directories in prompts; instead, request a general overview. Use multiple invocations for more detailed insights. Example: 'List all files in the main branch.'","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity about the field's purpose.","how_to_avoid":"Clarify the purpose and use cases of the field, specifying when and why no input is needed.","description":"Field requires no input; leave it blank, e.g., \"\" (empty string)."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Change the repository's active branch by specifying the exact branch name as a string. Only input the branch name, e.g., 'main'. Avoid additional phrases. Validate the branch name exists. Multiple invocations are supported for state validation.","fields":{"instructions":{"problems_with_current_description":"The description is too vague and lacks clarity on what 'name' refers to.","how_to_avoid":"Specify that it relates to the name of a Git branch in a version control system.","description":"Specify the Git branch name, e.g., 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool creates a new branch in the repository. Provide the branch name directly as a string parameter, e.g., `my_branch`. Avoid any additional text. The tool can be invoked multiple times to verify the file system state. Example: 'feature_branch_6'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks context.","how_to_avoid":"Provide a concise explanation emphasizing the purpose of the field.","description":"Specify the branch name, for example: 'my_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Fetch a list of files from a specified directory. Input must be the directory path as a plain string without additional instructions. Examples: 'src/main/java', 'docs/'. The tool can be invoked multiple times to check different directories.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and can be misinterpreted.","how_to_avoid":"Use concise language and clarify the format of the input.","description":"Enter the directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests in a repository. Input a clear, direct search query related to issue titles or topics. Example: 'Fix login bug'. Validate queries against known content. Repeat searches to confirm results.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the field's purpose.","how_to_avoid":"Specify the field's function more clearly to guide users in crafting effective search queries.","description":"User-generated search query in natural language, e.g., a title or topic of the issue."}}}
{"name":"Create_review_request","description":"Create a review request on the open pull request of the current branch. Specify the exact GitHub username of the reviewer as a string, e.g., 'username'. Avoid additional text. Invoke the tool multiple times for state validation. Examples: {'username': 'dev_user'}.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the purpose and use of the field.","how_to_avoid":"Specify the field's purpose and usage in a concise manner.","description":"Enter the GitHub username of the queried user, e.g., 'my_username'."}}}

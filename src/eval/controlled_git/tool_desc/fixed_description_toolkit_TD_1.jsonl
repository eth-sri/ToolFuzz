{"name":"Get_Issues","description":"Get_Issues Tool: This tool retrieves a list of issues from a specified repository. It outputs the title and issue number of up to 5 issues. To use this tool correctly, ensure that you have access to the desired repository. The tool does not require any input parameters, meaning it should be invoked with an empty string as input (e.g., ''). The tool is designed to fetch issues without any additional filters or customization options. Ensure that the repository is accessible and contains issues to avoid empty results. This tool is particularly useful for obtaining a quick overview of the most recent issues in a repository.","fields":{"instructions":{"problems_with_current_description":"Ambiguity about field usage and example.","how_to_avoid":"Clarify that input should be left blank.","description":"No input needed; leave as empty string ('')."}}}
{"name":"Get_Issue","description":"Get_Issue Tool: This tool retrieves detailed information from a specific issue, including the title, body, and comment thread. To use this tool correctly, you must adhere to the following instructions: \n1. Input Parameter: You must specify the issue number, which should be an integer. For example, if you want to fetch details of issue number 42, you should input `42` as the parameter.\n2. Valid Input: Ensure that the issue number you provide exists in the dataset, as the tool cannot fetch data for non-existent issues.\n3. Data Retrieved: The tool will output the title, body, and the entire comment thread of the specified issue.\n4. Error Handling: If an invalid or non-integer input is provided, or if the issue number does not exist, the tool will return an error message. \nBy following these guidelines, you can avoid incorrect usage and ensure the tool functions as intended.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks context about what the issue number pertains to.","how_to_avoid":"Specify that the issue number relates to a specific system or context, and ensure the example is clear.","description":"Unique issue identifier as an integer, e.g., `42`."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool allows you to post comments on GitHub issues. To use this tool correctly, follow the instructions below:\n\n1. **Specify the Issue Number**: Enter the issue number as an integer at the beginning of your input.\n2. **Separate with Two Newlines**: After the issue number, press 'Enter' twice to insert two newline characters.\n3. **Enter Your Comment**: Provide your comment text following the specified format:\n   - Instructions: Your comment must adhere to any specific formatting requirements.\n\n**Important Usage Guidelines**:\n- Use this tool sparingly to avoid cluttering the comment threads with unnecessary or redundant information.\n- Ensure your comment is relevant and adds value to the discussion.\n\nExample Input:\n```\n123\n\nThis is a sample comment following the required format.\n```\nBy following these steps, you ensure your comments are correctly formatted and appropriate for the GitHub issue context.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specificity.","how_to_avoid":"Provide clear, concise instructions that specify the required formatting steps.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool retrieves a list of open Pull Requests (PRs) from a repository. It provides the titles and PR numbers of up to five open Pull Requests. No input is required to use this tool; simply invoke it to receive the information. This tool does not support filtering or selecting specific PRs, and it will always return a maximum of five PRs, even if more are available.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity.","how_to_avoid":"Provide a concise description highlighting no need for user input.","description":"No input needed; use an empty string ('')."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR Tool: This tool allows you to retrieve the full text of all files associated with a specific pull request (PR) by providing the PR number. **Usage Instructions**: You must provide a valid PR number as an input parameter, formatted as an integer (e.g., `12`). Ensure that the PR number corresponds to an existing pull request in the repository you are analyzing. The tool does not support non-integer inputs, non-existent PR numbers, or any other types of queries. This tool is intended for understanding code changes or contributing to a pull request by examining the files involved.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what 'PR number' refers to.","how_to_avoid":"Specify that 'PR number' refers to a pull request identifier.","description":"An integer representing the pull request (PR) identifier, e.g., 12."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request Tool: This tool is designed to create a new pull request in a GitHub repository. It is crucial to follow the input format strictly to ensure successful operation. \n\n**Input Format Requirements:**\n1. **Title of the Pull Request:** Start your input with the title of the pull request.\n2. **Newlines:** After the title, insert two newlines (press 'Enter' twice).\n3. **Body/Description:** Write the body or description of the pull request. If applicable, reference relevant issues using the format `closes #<issue_number>`, such as `closes #3, closes #6`.\n\n**Example Input:**\nTo create a pull request titled 'README updates' with the description 'added contributors' names, closes #3', your input should be:\n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nEnsure all parts are included and formatted precisely as described to avoid errors.","fields":{"instructions":{"problems_with_current_description":"Vague and lacks guidance on specific formatting requirements.","how_to_avoid":"Provide clear and specific formatting instructions.","description":"Ensure compliance with specified formatting guidelines."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files Tool Description: This tool is designed to retrieve the complete text of all files within a specified pull request (PR). It is useful for reviewing code changes or contributing to a pull request. To use this tool correctly, please follow these instructions: 1. Input the PR number as an integer. Example: `12`. Only integer inputs are accepted as valid. 2. The tool will then fetch the full content of all files associated with the specified PR. Note: Ensure the PR number is valid within the scope of the repository you are querying. This tool does not support any other input formats or additional parameters. Using the tool outside the specified parameters may result in errors or incomplete data fetches.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what 'PR' refers to, potentially causing confusion.","how_to_avoid":"Specify what 'PR' stands for to provide clarity.","description":"Enter the pull request (PR) number as an integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool: This tool is designed as a wrapper for the GitHub API, allowing you to create files within a GitHub repository. **IMPORTANT USAGE INSTRUCTIONS**: Your input must adhere to the following format precisely to function correctly.\n\n1. **File Path**: Specify the full path of the file you wish to create. The path must not begin with a slash ('/'). Example: 'folder/subfolder/filename.txt'.\n\n2. **File Contents**: Directly after the file path, specify the contents you wish to write into the file. Example: 'This is the file content.'.\n\n**Example of Correct Usage**:\nTo create a file named 'test.txt' in a folder named 'test' with the content 'test contents', your input string should look like:\n\n'test/test.txt\n\ntest contents'\n\nEnsure there is a newline separating the file path and the file contents.\n\n**Instructions**: Follow the required formatting carefully to ensure successful file creation. Incorrect formatting or structure will result in errors.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks guidance on formatting specifics.","how_to_avoid":"Provide explicit instructions on formatting requirements.","description":"Ensure all instructions adhere to specified formatting guidelines."}}}
{"name":"Read_File","description":"Read_File: This tool serves as an interface with the GitHub API, specifically designed for reading the contents of a file hosted on GitHub. To use this tool, you must provide the complete file path relative to the root of the repository, without a leading slash. For example, if the file is located in a folder named 'some_dir' and the file is 'my_file.py', the correct input would be 'some_dir/my_file.py'. Avoid starting the path with a slash ('/'). This tool only accepts paths that are correctly formatted as per the stated guidelines, ensuring smooth operation and accurate file reading. This tool is intended for situations where accessing the file content directly from a GitHub repository is necessary.","fields":{"instructions":{"problems_with_current_description":"The current description is not concise and may cause confusion about path formatting.","how_to_avoid":"Use clearer language and specify path formatting rules precisely.","description":"Specify a relative file path without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File Tool: This tool is a wrapper for the GitHub API, designed specifically for updating the content of files in a GitHub repository. **IMPORTANT INSTRUCTIONS**: Your input must adhere to the following format precisely:\n\n1. **File Path**: Start by specifying the path of the file to be modified. Ensure the path is relative and does not begin with a slash. For example, use 'test/test.txt' instead of '/test/test.txt'.\n\n2. **Old Contents**: Next, indicate the content you wish to replace. This should be enclosed within 'OLD <<<<' and '>>>> OLD'. The content must match exactly what currently exists in the file.\n\n3. **New Contents**: Finally, provide the new content to replace the old content. This should be enclosed within 'NEW <<<<' and '>>>> NEW'.\n\nExample:\nIf you want to change the file 'test/test.txt' from 'old contents' to 'new contents', your input should be formatted as follows:\n\n```\ntest/test.txt\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n```\n\nFailure to adhere to this format may result in incorrect file updates. Ensure each part is correctly formatted and sequenced to utilize the tool effectively.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the consequences of not following the rules.","how_to_avoid":"Specify the importance and implications of adhering to the rules to ensure clarity and compliance.","description":"Adhere strictly to the specified rules to ensure compliance and avoid any issues."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool is designed to facilitate the deletion of files within a GitHub repository by utilizing the GitHub API. To use this tool correctly, you must provide the full path of the file you wish to delete, formatted as a string. **IMPORTANT**: The file path must NOT start with a slash; it should be relative to the repository root. For example, use 'some_dir/my_file.py'. Ensure you have the necessary permissions and authentication to perform file deletions in the repository. Only input the path string directly, without parameter names or additional formatting.","fields":{"instructions":{"problems_with_current_description":"The current description is unclear about the required input format and lacks emphasis on excluding the leading slash.","how_to_avoid":"Clarify the input format and emphasize the exclusion of the leading slash.","description":"Specify the file path without a leading slash, using a string format, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool generates a detailed overview of all existing files in the main branch of a repository. It provides a list of file names along with their full paths and concise summaries of their contents. The summaries are designed to give a quick insight into each file's purpose and structure, making it easier to understand and navigate large codebases. The tool operates automatically without requiring any input parameters. Simply run the tool to receive the overview report, which will be formatted as a JSON object containing 'file_name', 'file_path', and 'summary' for each file. Note that the tool is optimized for text-based files and may not produce meaningful summaries for binary files.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on what 'No input required' means and the context of its usage.","how_to_avoid":"Specify the purpose and context of the field to clarify its usage and meaning.","description":"Field requires no input; leave as an empty string for default functionality."}}}
{"name":"List_branches_in_this_repository","description":"List_branches_in_this_repository: This tool retrieves and returns a list of all branch names in the current repository. It does not require any input parameters. To use this tool, simply invoke it without providing any input. The tool will automatically process the request and output a list of branch names in plain text format. Ensure that you are within the context of a repository to enable successful execution.","fields":{"instructions":{"problems_with_current_description":"The description lacks clarity and precision, making it confusing for users.","how_to_avoid":"Use clear and concise language to convey that no user input is needed.","description":"No input needed: leave empty."}}}
{"name":"Set_active_branch","description":"Set_active_branch: This tool switches the active branch in the repository to a specified existing branch, similar to the `git checkout <branch_name>` command. It does not create new branches. **IMPORTANT**: You must provide the name of an existing branch as a single string input parameter. The input should be formatted as follows: 'branch_name', where 'branch_name' is the exact name of the branch you wish to switch to, e.g., 'my_branch'. Ensure the branch name exists in the repository before using this tool to prevent errors.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity.","how_to_avoid":"Provide a concise definition that includes the purpose of the field.","description":"Specify the branch name, e.g., 'feature_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch Tool: This tool is used to create a new branch in a repository. To use this tool correctly, you must provide the name of the new branch as a string. The input parameter should be formatted as follows: {\"instructions\": \"required\", \"The name of the branch, e.g. 'my_branch'\"}. It is crucial to ensure that the branch name is a valid string without spaces or special characters, except for underscores or hyphens. For example, valid inputs include 'feature_update', 'bugfix-123', etc. Invalid inputs include 'my branch', 'new@branch', etc. This tool does not accept any other parameters or inputs.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks context.","how_to_avoid":"Provide context and specify the purpose of the field.","description":"Specify the branch name to target, such as 'feature_branch'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files in a specified directory. To use this tool correctly, follow these guidelines: \n1. Input Format: Provide the path of the directory as a plain string. For example, 'some_dir/inner_dir'. \n2. Valid Input: Ensure the input is a valid directory path available in the current environment. \n3. Constraints: Do not add any additional formatting, quotes, or parameter names. Only the directory path string should be included. \nFailure to adhere to these instructions may result in incorrect translations or tool failures.","fields":{"instructions":{"problems_with_current_description":"The description is not concise and may confuse users about what exactly to input.","how_to_avoid":"Simplify the language and directly state what is needed without examples or redundant details.","description":"Enter a directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool searches for issues and pull requests in a repository using a specified search query. **IMPORTANT INSTRUCTIONS**: \n1. Your search query must be provided as a string input parameter. \n2. The query should be in natural language, such as a title or topic, e.g., 'Bug in login feature'. \n3. Limit the query to relevant keywords or phrases to ensure accurate search results. \n4. Avoid using special characters or overly complex sentences in the query. \n5. Examples of valid queries: 'Feature request for dark mode', 'Error in payment processing'. \n6. Examples of invalid queries: '', '12345', '#$%&*'. \n\nBy following these guidelines, the tool will efficiently return the desired issues and pull requests from the repository.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clear guidance on the expected input format.","how_to_avoid":"Specify the nature of the input and its purpose more explicitly.","description":"Enter a natural language query, such as a specific issue title or topic."}}}
{"name":"Create_review_request","description":"Create_review_request Tool: This tool enables the creation of a review request on an open pull request that corresponds to the current active branch in your GitHub repository. To use this tool correctly, follow these instructions: \n\n1. Ensure that there is an open pull request on the active branch where you want a review to be requested. \n2. Provide the GitHub username of the user you wish to request for the review as a string input parameter. This should be in the format of a plain string, for example: 'my_username'. \n3. Only one username should be provided per request. \n\nImportant: Failure to provide the username in the correct format or attempting to request a review on a non-existent pull request will result in an error. This tool does not support batch requests or multiple usernames in a single input.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity.","how_to_avoid":"Provide a concise and precise description with clear examples.","description":"Enter the user's GitHub username, for example, 'my_username'."}}}

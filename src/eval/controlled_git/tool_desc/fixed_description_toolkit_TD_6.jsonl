{"name":"Get_Issues","description":"Get_Issues Tool: This tool automatically retrieves a list of the five most recent issues from a predefined repository. It returns two pieces of information for each issue: the issue title and the issue number. The tool requires no input from the user; simply invoke the tool, and it will provide the requested data. Note that this tool is limited to fetching only the five latest issues, and no additional parameters or configurations are supported.","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous and lacks clarity.","how_to_avoid":"Provide a concise explanation specifying no user input is needed.","description":"Leave blank; requires no user input."}}}
{"name":"Get_Issue","description":"Get_Issue Tool: This tool retrieves detailed information about a specific issue from a database, including the issue's title, body, and the entire comment thread. To use this tool correctly, you must specify the issue number. Instructions: Provide the issue number as an integer (e.g., 42). Ensure that the issue number is valid and corresponds to an existing issue in the database. The tool does not accept non-integer or string values for the issue number. Incorrect usage or invalid inputs may result in errors or failure to fetch the desired issue information.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on permissible value range and format.","how_to_avoid":"Specify that the issue number must be a positive integer.","description":"Enter the issue number as a positive integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool allows you to add comments to a specific GitHub issue. To use the tool correctly, follow these instructions precisely: \n\n1. Input Format: \n   - First, specify the issue number as a standalone integer. This identifies which issue you want to comment on. \n   - Immediately after, press 'Enter' twice to create two newlines. \n   - Then, type your comment. Ensure that it is clear and concise. \n\n2. Example Input: \n   - 42\n   \n   - This is a sample comment on issue number 42.\n\n3. Usage Guidelines: \n   - Use this tool sparingly to avoid cluttering the discussion threads. \n   - Your comment should be relevant and add value to the discussion. \n   - Strictly adhere to the input format to ensure successful execution. Any deviation may result in errors.\n\nBy following these guidelines, you can effectively use the tool without encountering issues.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks details on the formatting requirements.","how_to_avoid":"Specify the exact formatting rules and expectations clearly.","description":"Ensure compliance with specified formatting guidelines."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool automatically retrieves a list of open pull requests (PRs) from a predefined repository. It outputs the title and PR number of up to five open pull requests. No input or parameters are required from the user to use this tool. The tool is designed to operate automatically and fetches data from a specific repository, which is configured internally. The user simply needs to invoke the tool to receive the latest specified PR information. This tool is not customizable for other repositories or additional data fields.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on input requirements.","how_to_avoid":"Provide a concise statement indicating that no user input is necessary.","description":"No user input needed; leave empty."}}}
{"name":"Overview_of_files_included_in_PR","description":"Overview_of_files_included_in_PR Tool: This tool retrieves the complete text of all files in a specified pull request (PR). It is designed to assist in understanding and contributing to code changes within a PR. **IMPORTANT USAGE INSTRUCTIONS**: You must provide the PR number as an integer input parameter. The PR number should be an integer without any additional characters or formatting. For example, use `12` to specify PR number 12. Incorrect input types, such as strings or numbers with additional formatting, will result in errors. This tool is only intended for use with valid integer PR numbers.","fields":{"instructions":{"problems_with_current_description":"The original description lacks clarity about what PR stands for and its context.","how_to_avoid":"Specify that PR refers to a pull request and clarify its relevance.","description":"The pull request number, represented as an integer, e.g., 12."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request Tool: This tool is designed to facilitate the creation of a new pull request in a GitHub repository. To use this tool correctly, follow these precise input formatting guidelines: \n\n1. Begin by specifying the title of the pull request. \n2. Insert exactly two newline characters after the title. \n3. Provide the body or description of the pull request. \n\nNote: When applicable, reference any related issues in the body using the format `closes #<issue_number>`. For instance, to create a pull request titled 'README updates' with the body 'added contributors' names, closes #3', format your input string as follows:\n\n```\nREADME updates\n\nadded contributors' names, closes #3\n```\n\nStrict adherence to this format is necessary to ensure the tool functions correctly.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specific guidance on formatting.","how_to_avoid":"Include clear and specific instructions on the exact formatting required.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: This tool retrieves the full content of all files in a specified pull request (PR). It is designed to help users understand and contribute to code changes within a PR. To use this tool correctly, you must provide the PR number as an integer input parameter. The PR number should be a whole number without any additional characters or formatting (e.g., simply '12'). Ensure that the PR number corresponds to an actual pull request within your repository. Inputs other than an integer PR number will result in an error. This tool does not support any other input formats or parameters, and it does not handle inputs such as strings, floats, or special characters. Use this tool only for its intended purpose of fetching file contents from a PR by specifying the correct PR number.","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous and lacks clarity regarding what 'PR' refers to.","how_to_avoid":"Explicitly define 'PR' as 'Pull Request' to eliminate ambiguity.","description":"The Pull Request number, represented as an integer, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool: This tool is designed to create a file in a GitHub repository using the GitHub API. To use this tool effectively, follow these instructions: \n1. Specify the file to be created by providing the full file path. Ensure the path does not start with a slash. \n2. Provide the contents of the file after the file path. \nUse a newline to separate the file path and the file content. \nExample: To create a file named 'test.txt' inside a 'test' directory containing the text 'test contents', format your input as follows: \n'test/test.txt\\n' followed by 'test contents'.\nEnsure you follow this format strictly to avoid errors.","fields":{"instructions":{"problems_with_current_description":"Vague and lacks specific guidelines.","how_to_avoid":"Provide detailed formatting guidelines and examples.","description":"Adhere to specified formatting guidelines precisely."}}}
{"name":"Read_File","description":"Read_File Tool: This tool is designed to interface with the GitHub API to read the contents of a specified file. To use this tool correctly, provide the full file path of the target file. **Important Guidelines**: 1. The file path must not start with a leading slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. 2. The path should be relative to the repository's root directory. 3. Ensure the file exists in the specified location to avoid errors. 4. This tool is intended for reading files within repositories accessible via the GitHub API. Adhering to these guidelines will ensure smooth operation and accurate results.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and lacks clarity.","how_to_avoid":"Use concise language to clearly specify the file path requirement.","description":"Specify a relative file path without a leading slash (e.g., 'some_dir/my_file.py')."}}}
{"name":"Update_File","description":"Update_File Tool: This tool acts as a wrapper for the GitHub API, enabling updates to file contents in a GitHub repository. **IMPORTANT USAGE GUIDELINES**: Your input to this tool must adhere to the following precise format and sequence:\n\n1. **File Path**: Start by specifying the full path of the file you wish to modify within the repository. Note that the path must not begin with a slash (/). For example, use 'test/test.txt' instead of '/test/test.txt'.\n\n2. **Old Contents**: Next, identify the exact text you want to replace. This section must be wrapped with the tags 'OLD <<<<' and '>>>> OLD'.\n\n3. **New Contents**: Finally, provide the new text to substitute the old contents, enclosed within 'NEW <<<<' and '>>>> NEW'.\n\n**Example**:\nTo replace 'old contents' in 'test/test.txt' with 'new contents', your input should be formatted as follows:\n\ntest/test.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n\n**Note**: Ensure each part is clearly separated and the format is strictly followed to avoid errors. Deviations from this structure can lead to incorrect updates or failures.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what rules should be followed.","how_to_avoid":"Provide specific guidelines or examples of the rules to enhance understanding.","description":"Adhere exactly to the specified guidelines and rules provided."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool serves as an interface to the GitHub API for deleting files within a specified GitHub repository. Usage Instructions: 1. Provide the full file path of the target file you wish to delete. Ensure that the path is relative to the root of the repository and does not begin with a leading slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. 2. Input the file path as a plain string without including parameter names or additional symbols. 3. Ensure you have the necessary permissions to delete files in the specified repository. Allowed Inputs: Only strings representing valid file paths without leading slashes. Disallowed Inputs: Paths starting with a slash, parameter names, or non-string inputs. Note: This tool should be used with caution as it permanently deletes files from the repository.","fields":{"instructions":{"problems_with_current_description":"The current description is too verbose and includes redundant information, potentially causing confusion.","how_to_avoid":"Use concise language and focus on the key requirement to improve clarity.","description":"Specify the file path to delete without starting with a slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"Overview_of_existing_files_in_Main_branch: This tool generates a comprehensive list of all files present in the main branch of a specified repository. It outputs the file names, their directory paths, and concise summaries of their contents. This tool is designed to aid users in quickly understanding the structure and content of large codebases. It does not require any input parameters to function. To use the tool, simply invoke it without any arguments. The output will be a structured overview of the repository's file system, useful for navigation and analysis purposes. Note that the tool only provides information about file structures and does not modify or interact with the files themselves.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks clarity on its purpose and usage.","how_to_avoid":"Provide a concise explanation indicating that no user input is needed.","description":"No user input necessary; leave as an empty string."}}}
{"name":"List_branches_in_this_repository","description":"Tool Name: List_branches_in_this_repository\n\nPurpose: This tool retrieves and lists all branch names within a given repository that the user has access to.\n\nUsage Instructions: \n- No input parameters are required to use this tool.\n- Ensure that you have the necessary permissions to access the repository from which you want to list the branches.\n- Simply invoke the tool, and it will automatically fetch and return the names of all branches within the currently selected repository.\n\nOutput: The tool will return a list of branch names as strings.\n\nRestrictions: \n- This tool can only be used on repositories that the user has permission to access.\n- Ensure you are using this tool in the context of a repository environment where branch listings are applicable.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and directness, possibly causing confusion.","how_to_avoid":"Use straightforward language and specify that no user action is needed.","description":"No user action required; leave the field empty."}}}
{"name":"Set_active_branch","description":"Set_active_branch Tool: This tool changes the active branch in your repository, equivalent to using the `git checkout <branch_name>` command. It does not create new branches. To use this tool, you must provide the name of an existing branch as a string input. The branch name should be a valid string that follows your repository's naming conventions, such as `my_branch`. Ensure the branch exists in your repository before attempting to switch to it. This tool does not support branch creation or deletion functions. Example usage: To switch to a branch named 'feature/update', input the string 'feature/update'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks context, making it unclear what 'branch' refers to.","how_to_avoid":"Provide a more specific explanation of what 'branch' means in this context.","description":"Specify the branch name used in version control, e.g., 'feature_branch'."}}}
{"name":"Create_a_new_branch","description":"Create a New Branch Tool: This tool is designed to create a new branch in your repository. To use this tool correctly, you must provide the name of the new branch as a string input parameter. The branch name should follow standard naming conventions, which typically include using lowercase letters, numbers, and hyphens. For example, a valid branch name could be 'feature-update' or 'bugfix-123'. Please ensure the branch name does not contain spaces or special characters, as these are not allowed. Begin by specifying the branch name in the 'instructions' parameter, as shown in the examples above. This tool does not handle branch name conflicts, so ensure the name is unique within your repository.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and doesn't specify the purpose or context of 'branch'.","how_to_avoid":"Clarify that it requires specifying a version control branch name for clarity.","description":"Specify the version control branch name, e.g., 'feature-update'."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: This tool retrieves a list of all files within a specified directory. To use this tool correctly, you must provide the path of the directory as a string input. The path should be a valid directory path formatted as a string, such as 'some_dir/inner_dir'. Do not include any additional parameter names or non-string data types. Ensure the directory path is correctly formatted and exists in the file system for the tool to function properly.","fields":{"instructions":{"problems_with_current_description":"The description is verbose and redundant, making it unclear and slightly confusing.","how_to_avoid":"Simplify the language and remove unnecessary details to enhance clarity.","description":"Enter the directory path as a string, e.g., 'some_dir/inner_dir'."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool allows you to search for issues and pull requests within a repository. To use this tool correctly, you must provide a search query as a string input. The query should be a natural language string that describes the issue or pull request you are searching for, e.g., 'Bug in login feature' or 'Add new payment gateway'. Avoid using complex boolean operators or code snippets, as these are not supported. Ensure your query is concise and relevant to the repository content. Examples of correct usage: 'Fix typo in documentation', 'Optimize database queries'. Incorrect usage examples: 'SELECT * FROM issues WHERE title LIKE \"%bug%\"', 'issue=1234'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on its purpose and usage.","how_to_avoid":"Provide a concise and specific explanation, focusing on the function of the field.","description":"Enter a natural language query to describe your issue or topic succinctly."}}}
{"name":"Create_review_request","description":"Create_review_request Tool: This tool is designed to create a review request on an open pull request that corresponds to the currently active branch in your GitHub repository. To use this tool correctly, you must specify the GitHub username of the person to whom you are sending the review request. This username must be provided as a string input parameter. For example, if the username is 'my_username', you should input it exactly as 'my_username'. Please note that the branch must have an open pull request associated with it for the tool to function correctly. Ensure that the username is valid and has access to the repository to avoid any errors.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected input format and purpose.","how_to_avoid":"Specify that the input should be a valid GitHub username without special characters.","description":"Enter a valid GitHub username without special characters, e.g., 'my_username'."}}}

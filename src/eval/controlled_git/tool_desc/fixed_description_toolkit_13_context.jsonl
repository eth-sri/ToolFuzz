{"name":"Get_Issues","description":"Get_Issues: Fetches titles and numbers of 5 repository issues without input. Use precise prompts like 'List issue titles' or 'Get first 5 issues.' Avoid vague terms or expecting dynamic inputs. Invoke multiple times for updated data.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and doesn't specify usage constraints or expected input format, leading to misinterpretation.","how_to_avoid":"Clarify that no input should be provided and emphasize the requirement of an empty string input for correct execution.","description":"Requires no input; use an empty string to ensure correct operation."}}}
{"name":"Get_Issue","description":"Get_Issue: Fetch the title, body, and comments of a specific issue. Input must be an integer issue number, e.g., `42`. Do not use symbols or words. Invoke multiple times for validation. Example: `Get_Issue(42)`.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague, leading to inconsistent interpretation of input format requirements.","how_to_avoid":"Specify that the issue number must be an integer without any additional text or symbols.","description":"Provide issue number as a plain integer, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue: To comment on a GitHub issue, input the issue number as an integer, followed by two newlines, then your comment. Maintain this exact format to avoid errors. The tool can be invoked multiple times for validation. Example: '10\\n\\nCould we consider updating to Java 11?'","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the specific formatting required for successful execution.","how_to_avoid":"Specify exact syntax and structure needed, including examples of correct input.","description":"Ensure commands match the exact syntax and format guidelines for successful execution."}}}
{"name":"Overview_of_files_included_in_PR","description":"Fetch the full text of all files in a pull request (PR) using only the PR number as an integer input (e.g., 12). Avoid adding text or symbols. The tool can be invoked multiple times for thorough validation. Example: Provide input as '12'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on acceptable input formats, leading to misinterpretations and failures in system processing.","how_to_avoid":"Specify that the PR number should be given as a standalone integer without prefixes or additional text.","description":"Enter the pull request number as a standalone integer, e.g., 12."}}}
{"name":"List_Pull_Requests_Files","description":"List_Pull_Requests_Files: Fetches full text of all files in a pull request by providing the PR number as an integer (e.g., 12). Ensure input is a plain integer without prefixes or text. Invoke multiple times if needed to confirm the file system state. Example usage: Provide '12' to get details of PR number 12.","fields":{"instructions":{"problems_with_current_description":"The current description does not clarify that the PR number should be entered as an integer without any prefix or additional text.","how_to_avoid":"Specify that only the numerical part of the PR number is required, without any prefixes like 'PR' or 'pull request'.","description":"Provide only the numeric part of the PR number, e.g., 12."}}}
{"name":"Create_File","description":"Create_File: Use this tool to create a file in a GitHub repo. Input must include a file path (no leading slash) and file contents on separate lines. Example: 'dir/file.txt\\n\\ncontents'. Validate inputs to prevent errors. The tool supports multiple invocations for checking file system state.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the expected format, causing misinterpretation and incorrect outputs.","how_to_avoid":"Specify the exact formatting requirements clearly to ensure correct parsing and execution.","description":"Provide file path and content in a single string, separated by two newlines."}}}
{"name":"Read_File","description":"Read_File: Use this tool to read a file's content from a GitHub repo. Provide a relative file path without a leading slash, e.g., 'some_dir/my_file.py'. Validate paths to prevent errors. Invoke multiple times if needed to check file system state. Examples: 'src/main/MyClass.java', 'config/settings.xml'.","fields":{"instructions":{"problems_with_current_description":"The original description fails to specify that the path should be relative to a base directory.","how_to_avoid":"Clarify that the path must be relative to the current working directory.","description":"Provide the relative file path from the current directory, excluding a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: Use this tool to update file contents in a GitHub repo. Input must include: 1) File path (no leading slash), 2) Old content in 'OLD <<<< >>>> OLD', 3) New content in 'NEW <<<< >>>> NEW'. Example: 'test/test.txt\\nOLD <<<<\\nold content\\n>>>> OLD\\nNEW <<<<\\nnew content\\n>>>> NEW'. Repeat for multiple updates. Ensure input validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity, leading to misinterpretation and incorrect formatting of instructions.","how_to_avoid":"Clearly specify how to format the instructions, including structure and markers for old and new content.","description":"Format instructions precisely: specify file path, unchanged text, and clearly mark old/new content."}}}
{"name":"Delete_File","description":"Delete_File: Use to delete a file in a GitHub repository by providing the exact file path, e.g., 'some_dir/my_file.py'. Ensure path does not start with a slash. Directly input path as a string. Invoke multiple times to verify file system state.","fields":{"instructions":{"problems_with_current_description":"The current description doesn't clarify the context or format needed, leading to incorrect or missing arguments.","how_to_avoid":"Specify the path format and context, ensuring users understand how to input valid file paths.","description":"Enter the relative file path to delete, without a leading slash, e.g., 'some_dir/my_file.py'. Provide only the path as a string."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"This tool provides a comprehensive overview of all files in the main branch, listing names, paths, and summaries. It cannot filter specific directories. To explore a directory, invoke the tool and manually find desired details. No input is required. Reuse the tool for updated repository views.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on when inputs are required, leading to incorrect argument generation.","how_to_avoid":"Specify when and how the input should be structured to generate correct arguments.","description":"Leave blank unless specifying directory contents; use precise queries for accurate argument generation."}}}
{"name":"Set_active_branch","description":"Set_active_branch: Switch to an existing branch in the repository, similar to `git checkout <branch_name>`. Specify the exact branch name as a string. Check branch existence prior to use. Example: {'instructions':'main'}. Can be invoked multiple times.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and does not clarify the specific input format required, leading to incorrect or misunderstood branch names.","how_to_avoid":"Specify that the input should be the exact name of the branch without additional context or instructions.","description":"Specify the exact branch name to switch to, such as 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: Use this tool to create a new branch by specifying the branch name as a direct string input, e.g., 'Create_a_new_branch: my_branch'. Avoid additional text or commands. The tool can be invoked multiple times to check the file system state. Examples: 'Create_a_new_branch: java11_upgrade', 'Create_a_new_branch: feature_update'.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on input requirements, leading to incorrect branch name parsing and agent invocation failures.","how_to_avoid":"Clarify the input format and structure expected for branch names to ensure correct processing by the agent.","description":"Specify the exact branch name to create, using alphanumeric characters and underscores only."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory: Fetch a list of all files in a specified directory. Provide the directory path as a plain string, e.g., 'some_dir/inner_dir'. Avoid adding instructions or context. The tool can be invoked multiple times for consistent validation. Examples: 'src/main/java', 'src/resources/'.","fields":{"instructions":{"problems_with_current_description":"The current description does not clearly instruct users to provide only the last directory name.","how_to_avoid":"Clarify the description to instruct users to provide only the final directory name without slashes.","description":"Specify the final directory name (e.g., 'WEB-INF'), not the full path."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: Use this tool to find issues and pull requests in a repository by specifying a precise search query string relevant to titles or topics. Format queries as brief, descriptive strings (e.g., 'Bug in login function'). Avoid general questions. Invoke the tool multiple times for thorough results.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on expected input format and does not specify the context or scope of the query.","how_to_avoid":"Clarify the nature of the input and provide context or examples to guide users.","description":"Enter a concise natural language query about a specific issue or topic, such as 'Challenges when upgrading to Java 11'."}}}
{"name":"Create_review_request","description":"Create_review_request: Initiates a review request on the open pull request for the current active branch. Specify the target's GitHub username clearly as a string, e.g., 'username123'. Ensure your query states the action explicitly. Multiple invocations are allowed for better validation.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity on the required format for GitHub usernames, leading to misinterpretation and failure to generate correct arguments.","how_to_avoid":"Clarify the format by specifying that the username should be a single word without underscores or special characters.","description":"GitHub username of the user requested, formatted as a single word without underscores or special characters, e.g., 'myusername'."}}}

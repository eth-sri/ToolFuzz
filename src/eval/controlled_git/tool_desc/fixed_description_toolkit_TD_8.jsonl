{"name":"Get_Issues","description":"Get_Issues Tool: This tool retrieves a list of the latest five issues from a specified repository, providing the title and issue number for each. It requires no input parameters to function. To use this tool correctly, simply invoke it without providing any input. The tool automatically returns the most recent five issues, so if there are fewer than five issues in the repository, it will return only those available. This tool is designed to assist users in quickly accessing a snapshot of the current issues in a repository, useful for monitoring or reporting purposes. Note that it does not provide additional details such as issue body, status, or labels.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on whether 'empty string' is required or optional.","how_to_avoid":"Specify that no input should be provided and an empty string is used by default.","description":"Leave blank; defaults to an empty string."}}}
{"name":"Get_Issue","description":"Get_Issue Tool Manual: This tool retrieves the title, body, and comment thread of a specific issue from a repository. To use this tool, follow these instructions: 1. Input Requirements: You must provide the issue number, which is a mandatory parameter. The issue number must be an integer. For example, valid inputs include `42`, `17`, etc. 2. Invalid Inputs: Do not use non-integer values, such as strings ('forty-two') or floating-point numbers (42.0). 3. Usage Example: To fetch details for issue number 42, simply input: 42. 4. Constraints: Ensure the issue number corresponds to an existing issue within the repository. The tool does not create or modify issues; it only retrieves existing data. By adhering to these guidelines, you can effectively utilize the Get_Issue tool without encountering errors.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what exactly the field represents or how it is used.","how_to_avoid":"Provide a clear and specific description of the field's purpose, ensuring it is easily understandable.","description":"Unique issue identifier as a whole number, e.g., 42."}}}
{"name":"Comment_on_Issue","description":"Comment_on_Issue Tool: This tool enables you to add comments to a GitHub issue. To use this tool correctly, your input must adhere to the following structured format: \n\n1. Begin by specifying the issue number as an integer (e.g., 123).\n2. Follow this with two newline characters to separate the issue number from your comment.\n3. After the newlines, enter your comment text. Ensure that your comment is concise and relevant to avoid cluttering the thread.\n\n**Usage Example:**\n```\n123\n\nThis is my comment on the issue.\n```\n\n**Important Notes:**\n- Use this tool sparingly to maintain a clean and relevant comment thread.\n- Your comment must be well-formatted and directly related to the issue at hand.\n- Ensure compliance with community guidelines and maintain a professional tone.","fields":{"instructions":{"problems_with_current_description":"It is vague and lacks specificity about the formatting requirements.","how_to_avoid":"Specify what formatting entails to ensure clarity and compliance.","description":"Adhere to specified formatting guidelines accurately."}}}
{"name":"List_open_pull_requests__PRs_","description":"This tool, 'List_open_pull_requests__PRs_', retrieves a list of open Pull Requests (PRs) from a specified repository. It returns the title and PR number of up to 5 open PRs. The tool does not require any input parameters, meaning users simply need to execute the tool without providing additional data. It is important to note that the tool only fetches information from the default repository it is configured to access. The output will be a list containing the title and PR number of each open PR. This tool is ideal for quickly reviewing the most recent PR activity without needing to delve into specific details or configurations. Ensure the tool is connected to the correct repository context for accurate results.","fields":{"instructions":{"problems_with_current_description":"It lacks clarity on what 'No input required' specifically means.","how_to_avoid":"Clarify that the field should be left empty by default.","description":"Leave this field empty; no input is necessary."}}}
{"name":"Overview_of_files_included_in_PR","description":"This tool, 'Overview_of_files_included_in_PR', retrieves the full text of all files in a specified pull request (PR). It is used for understanding code changes or contributing to a PR. To use this tool, provide the PR number as an integer input parameter. Input should be a positive integer representing an existing PR number, e.g., '12'. Invalid inputs such as non-integer values, negative numbers, or non-existent PR numbers will result in an error. Ensure to verify the PR number before input to avoid errors. The tool outputs the full text of files included in the specified PR, which can be used for code review or analysis.","fields":{"instructions":{"problems_with_current_description":"Ambiguity and lack of context; unclear what 'PR' refers to.","how_to_avoid":"Provide context by defining 'PR' and specify its relevance.","description":"Enter the pull request (PR) number as an integer, e.g., 12."}}}
{"name":"Create_Pull_Request","description":"Create_Pull_Request: This tool is designed to facilitate the creation of a new pull request in a GitHub repository. To use this tool correctly, adhere strictly to the following input formatting rules: \n\n1. Start with the title of the pull request. \n2. Follow the title with two newline characters. \n3. After the newlines, provide the body or description of the pull request. \n\nIn the description, you may reference relevant issues using the format `closes #<issue_number>`, such as `closes #3, closes #6`. Ensure the input string is clear and concise, with a recommended character limit of 256 for the title and 1024 for the body. \n\nExample: To create a pull request titled 'README updates' with the description 'added contributors' names, closes #3', format your input as follows:\n\nREADME updates\n\nadded contributors' names, closes #3\n\nBy following these instructions, you will ensure the tool functions as intended, creating a well-formed pull request.","fields":{"instructions":{"problems_with_current_description":"The description is vague and lacks details on what formatting is required.","how_to_avoid":"Specify the exact formatting expectations and provide clear guidance.","description":"Adhere to specified formatting guidelines for precise and accurate instructions."}}}
{"name":"List_Pull_Requests_Files","description":"The List_Pull_Requests_Files tool allows users to retrieve the full text of all files associated with a specific pull request (PR). This is useful for code review, analysis, or contributions. To use this tool correctly, follow these instructions: \n1. Identify the PR number you wish to query. The PR number is a unique integer associated with each pull request. \n2. Input the PR number as an integer into the tool. For example, if the PR number is 12, input '12'. \n3. Ensure that only integers are used as input. Strings, floats, or other types will result in an error. \n4. The tool will then fetch and return the full text of all files within the specified PR. \nPlease note that any misuse or incorrect input format will prevent the tool from functioning as intended.","fields":{"instructions":{"problems_with_current_description":"The current description lacks clarity and specificity about what 'PR' stands for.","how_to_avoid":"Clearly define 'PR' as 'Pull Request' to prevent ambiguity.","description":"An integer representing the Pull Request (PR) number, e.g., 12."}}}
{"name":"Create_File","description":"Create_File Tool Description: This tool is designed to facilitate the creation of a file in a GitHub repository using the GitHub API. To use this tool correctly, follow these explicit instructions: 1. Specify the file path: Provide the full path for the new file. Note that the path must not begin with a slash (e.g., 'folder/subfolder/filename.txt'). 2. Specify the file contents: Immediately follow the file path with the content to be written within the file. These two components must be submitted as a single input string, separated by a newline. Example Usage: To create a file named 'test.txt' in the 'test' directory with the content 'test contents', your input should be: 'test/test.txt\\ntest contents'. Ensure your input strictly adheres to this format to avoid errors.","fields":{"instructions":{"problems_with_current_description":"The current description is too vague and lacks specificity.","how_to_avoid":"Provide a clear and concise description that specifies the formatting requirements.","description":"Ensure compliance with specified formatting guidelines."}}}
{"name":"Read_File","description":"Read_File Tool: This tool serves as an interface to access the contents of a file stored in a GitHub repository using the GitHub API. To use this tool correctly, you must provide the full file path as input. The file path should be relative to the root of the repository and must not start with a leading slash. For example, use 'some_dir/my_file.py' instead of '/some_dir/my_file.py'. Ensure the file path is accurate and corresponds to an existing file in the repository. Incorrect file paths or paths starting with a slash will result in errors. This tool is specifically designed to read file contents and does not support file writing or editing operations.","fields":{"instructions":{"problems_with_current_description":"The current description is verbose and lacks clarity about the file path format requirements.","how_to_avoid":"Use concise language to specify the file path format and emphasize the prohibition of starting with a slash.","description":"Specify a relative file path without a leading slash, e.g., 'some_dir/my_file.py'."}}}
{"name":"Update_File","description":"Update_File: \nThis tool is a wrapper for the GitHub API, designed to update the contents of a file in a GitHub repository. To use this tool correctly, follow these steps:\n\n1. **File Path**: Specify the file to modify by providing its full file path. **Important**: Do not start the path with a slash (e.g., 'test/test.txt').\n\n2. **Old Contents**: Specify the old contents that you wish to replace. Wrap the old contents with:\n   - OLD <<<<\n   - [Your old content here]\n   - >>>> OLD\n\n3. **New Contents**: Specify the new contents that will replace the old contents. Wrap the new contents with:\n   - NEW <<<<\n   - [Your new content here]\n   - >>>> NEW\n\n**Example**: To replace the content of the file 'test/test.txt' from 'old contents' to 'new contents', your input should be:\n\n```\ntest/test.txt\n\nThis is text that will not be changed\nOLD <<<<\nold contents\n>>>> OLD\nNEW <<<<\nnew contents\n>>>> NEW\n```\n\nEnsure all parts of your input follow the specified format strictly to avoid errors. The tool will only execute if the input is formatted exactly as described.","fields":{"instructions":{"problems_with_current_description":"Vague and lacks precision, potentially leading to misinterpretation.","how_to_avoid":"Use clear, concise language to specify adherence requirements.","description":"Adhere strictly to the given guidelines without deviation."}}}
{"name":"Delete_File","description":"Delete_File Tool: This tool enables you to delete a file from a GitHub repository using the GitHub API. To use this tool correctly, follow these instructions: \n\n1. **Purpose**: This tool is designed to remove a specified file from a GitHub repository. \n\n2. **Input Format**: You must provide the full file path of the file you wish to delete. The path should be a string without a leading slash. Example of correct input: `\"some_dir/my_file.py\"`. Example of incorrect input: `\"/some_dir/my_file.py\"`. \n\n3. **Authentication**: Ensure you have the necessary permissions and authentication to delete files in the target repository. Use a personal access token or other authentication methods compatible with the GitHub API. \n\n4. **Restrictions**: Only input the file path as a string. Do not include additional parameters or labels. \n\n5. **Example Usage**: \n   - Correct: `some_dir/my_file.py` \n   - Incorrect: `/some_dir/my_file.py` \n\nBy following these guidelines, you can successfully delete files in a GitHub repository using this tool.","fields":{"instructions":{"problems_with_current_description":"The existing description is too verbose and may confuse users about where to input the file path.","how_to_avoid":"Simplify the description and clarify that the input should be a relative file path.","description":"Enter the relative file path to delete, e.g., 'some_dir/my_file.py'. Avoid starting with a slash."}}}
{"name":"Overview_of_existing_files_in_Main_branch","description":"The 'Overview_of_existing_files_in_Main_branch' tool is designed to generate a comprehensive list of all files currently present in the main branch of a repository. The tool will output each file's name, its path within the repository, and a brief description of its contents. This is particularly useful for navigating and understanding large codebases. To use this tool, no input parameters are required; simply invoke the tool to receive the overview. Ensure that the repository you are accessing is properly configured and that you have the necessary permissions to view its contents. The tool does not support additional inputs or parameters beyond its default function of listing files.","fields":{"instructions":{"problems_with_current_description":"The current description is ambiguous and lacks clarity on the input requirements.","how_to_avoid":"Ensure the description explicitly states that no input is needed and use simpler language.","description":"No input necessary; leave the field empty."}}}
{"name":"List_branches_in_this_repository","description":"List_branches_in_this_repository: This tool retrieves and returns the names of all branches within the current repository. To use this tool, you simply need to invoke it without providing any input parameters. Ensure that no additional arguments or strings are passed, as the tool does not require any inputs to function correctly. This tool is designed exclusively for fetching the branch names and cannot perform other operations such as creating, deleting, or modifying branches.","fields":{"instructions":{"problems_with_current_description":"Lacks clarity on field purpose and expected input.","how_to_avoid":"Use precise language to specify no input is needed.","description":"No input needed; use an empty string (\"\")."}}}
{"name":"Set_active_branch","description":"Set_active_branch Tool: This tool changes the active branch in a version control repository, similar to executing `git checkout <branch_name>` or `git switch -c <branch_name>`. To use this tool correctly, you must provide the name of the branch as a string input parameter. The branch name must be a valid string that exists in the repository, e.g., 'my_branch'. Ensure the branch name is correctly spelled and corresponds to an existing branch to avoid errors. This tool does not create new branches; it only switches to existing ones. Usage example: If you want to switch to a branch named 'feature/update', pass 'feature/update' as the input parameter.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks specificity about the field's purpose.","how_to_avoid":"Clearly specify that the field requires a branch name for version control identification.","description":"Specify the branch name for version control, e.g., 'my_branch'."}}}
{"name":"Create_a_new_branch","description":"Create_a_new_branch: This tool is used to create a new branch in a repository. IMPORTANT: To use this tool correctly, you must specify the name of the new branch as a string input parameter. The branch name should follow git naming conventions, allowing alphanumeric characters, hyphens, and underscores. It should not contain spaces or special characters. Example of a valid branch name: 'feature_update_2023'. Ensure the branch name is unique within the repository. Provide the branch name as a parameter labeled 'instructions'.","fields":{"instructions":{"problems_with_current_description":"The original description is vague and lacks context, leading to potential confusion.","how_to_avoid":"Provide specific guidance on what the branch name should represent or be used for.","description":"Specify the branch name, such as 'my_branch', for identification or reference purposes."}}}
{"name":"Get_files_from_a_directory","description":"Get_files_from_a_directory Tool: This tool retrieves a list of all files located within a specified directory. To use this tool correctly, you must provide the directory path as a single string input. Ensure the following guidelines are followed: 1. Input Format: Provide the directory path as a string without including the parameter name. For example, to specify a directory located at 'some_dir/inner_dir', input it as a simple string like 'some_dir/inner_dir'. 2. Input Type: Only a string is accepted as input. Do not include any additional data types or structures. 3. Path Validity: Ensure that the path string accurately reflects an existing directory path on the system where the tool is running. 4. Output: The tool will return a list of filenames contained in the specified directory. Note: The tool does not traverse subdirectories and only lists files in the specified directory. This description clarifies the expected input type and format, along with constraints and the nature of the output, ensuring users can use the tool effectively.","fields":{"instructions":{"problems_with_current_description":"Unclear guidance on expected input format and exclusion of parameter name.","how_to_avoid":"Clarify input requirements and explicitly state format without parameter name.","description":"Provide directory path as a string, like 'some_dir/inner_dir', without parameter name."}}}
{"name":"Search_issues_and_pull_requests","description":"Search_issues_and_pull_requests: This tool allows you to search for issues and pull requests within a repository. **IMPORTANT USAGE INSTRUCTIONS**: You must provide a search query as a string input parameter. The search query should be a well-formed natural language phrase or keywords, such as 'bug fix', 'new feature request', or 'documentation update'. Ensure the query is concise and relevant to the repository's content. Avoid using overly generic terms or unrelated topics, as these may yield inaccurate results. Example of a valid query: 'UI bug in login feature'. Example of an invalid query: 'all issues and pull requests'.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on what 'natural language search query' entails.","how_to_avoid":"Provide a clear and concise definition of the field's purpose and usage.","description":"Enter a search query in plain language, such as 'My issue title or topic'."}}}
{"name":"Create_review_request","description":"Create_review_request Tool Manual: This tool is designed to create a review request on an open pull request that corresponds to the current active branch. To use this tool correctly, you must provide the GitHub username of the person from whom you are requesting a review. The username should be a valid GitHub handle and must be supplied as a string input parameter. Ensure that the branch you are working on has an open pull request, as this tool will not function without one. Example usage: If you wish to request a review from a user with the GitHub handle 'my_username', specify the input as follows: instructions:'my_username'. Note: The tool will not work if the specified username does not exist or if there is no open pull request for the current branch.","fields":{"instructions":{"problems_with_current_description":"The current description is vague and lacks clarity on the context or usage.","how_to_avoid":"Specify the purpose and context of using the GitHub username clearly.","description":"Specify the GitHub username for the user, e.g., `my_username`."}}}

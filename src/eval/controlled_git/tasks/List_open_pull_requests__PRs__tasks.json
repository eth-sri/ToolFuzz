[{"task": "Add a comment to the pull request #12.", "user_prompt": "Please add a comment to the pull request with the title 'Feature image optimization' to inform the team that the changes have been reviewed and approved.", "code_snippet": "repo.add_comment(issue_number=12, comment='The changes have been reviewed and approved.'); assert len(repo.list_comments(issue_number=12)) >= 1"}, {"task": "Add a comment to a specific pull request with feedback.", "user_prompt": "Please add a comment to Pull Request #12 with the feedback: 'Great work on enhancing the functionality and fixing the bugs. The documentation updates are very helpful!'", "code_snippet": "repo.add_comment(issue_number=12, comment='Great work on enhancing the functionality and fixing the bugs. The documentation updates are very helpful!')\nassert len(repo.list_comments(issue_number=12)) == 1"}, {"task": "Add a comment to a specific pull request", "user_prompt": "Please add a comment 'Reviewed and approved for merging' to the pull request titled 'Feature image optimization #12'.", "code_snippet": "repo.add_comment(12, 'Reviewed and approved for merging')\nassert len(repo.list_comments(12)) == 1"}, {"task": "Add a comment to a pull request", "user_prompt": "I need to add a comment to the pull request titled 'Fix service bug #10'. Can you help me with that?", "code_snippet": "issue_number = 10\nrepo.add_comment(issue_number, 'This is a test comment.')\nassert len(repo.list_comments(issue_number)) == 1"}, {"task": "Comment on a specific Pull Request to request changes.", "user_prompt": "Please add a comment to PR #12 requesting changes to the API integration documentation.", "code_snippet": "repo.list_comments(issue_number=12)\nassert len(repo.list_comments(issue_number=12)) > 0"}, {"task": "Review and merge the latest pull request related to feature image optimization.", "user_prompt": "Please review the changes in the 'Feature image optimization' pull request and merge it if everything looks good.", "code_snippet": "pr_list = repo.list_prs()\nfeature_image_optimization_pr = next((pr for pr in pr_list if pr.title == 'Feature image optimization'), None)\nassert feature_image_optimization_pr is not None\n# Assuming the PR is reviewed and ready to merge\n# repo.merge_pr(feature_image_optimization_pr.number)\nassert feature_image_optimization_pr.merged == True"}, {"task": "Add a comment to a specific pull request", "user_prompt": "Please add a comment to Pull Request #10 stating 'Bug fix verified and approved'.", "code_snippet": "repo.add_comment(issue_number=10, comment='Bug fix verified and approved')\nassert len(repo.list_comments(issue_number=10)) == 1"}, {"task": "Add a comment to a specific pull request to request changes.", "user_prompt": "Please add a comment to the Pull Request #10 requesting changes to improve code readability and fix the identified bug.", "code_snippet": "repo.add_comment(10, 'Please improve code readability and fix the identified bug.'); assert len(repo.list_comments(10)) == 1"}, {"task": "Add a comment to a specific pull request", "user_prompt": "Please add a comment to the pull request titled 'Feature image optimization' with the message 'Great work on the image optimization!'", "code_snippet": "issue_number = 12\nrepo.add_comment(issue_number, 'Great work on the image optimization!')\nassert len(repo.list_comments(issue_number)) == 1"}, {"task": "Review and merge the latest open pull request", "user_prompt": "Can you please review the latest open pull request and merge it if it meets the project's quality standards?", "code_snippet": "latest_pr = repo.list_prs()[0]\nassert latest_pr['title'] and latest_pr['number']\n# Assuming the merge function is called 'merge_pr'\n# repo.merge_pr(latest_pr['number'])"}]
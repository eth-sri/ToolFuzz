copy_file:copy_file: Duplicate an existing file to a specified path. Parameters: source_path (must be an existing file), destination_path (must be a valid path, not a directory). Ensure paths are explicit and distinct. Use multiple invocations for checking file system.
file_delete:file_delete: Delete a file by providing an absolute path using forward slashes. Ensure the file path exists and follows the correct format. Validate the path's existence before deletion. Invoke the tool multiple times to ensure file system consistency.
file_search:file_search: Search files in a specified directory using Unix shell patterns. Parameters: 'dir_path' (absolute path), 'pattern' (Unix wildcard, * matches any characters). Example: {'dir_path': 'root/folder', 'pattern': '*.txt'}. Avoid regex-specific metacharacters. Invoke multiple times for validation.
move_file:move_file: Move or rename a file using absolute paths. Parameters: source_path (existing file path), destination_path (new file path). Ensure paths exist and are correct. Validate file existence before invocation. Invoke multiple times for consistent file system state. E.g., move_file(source_path="/path/to/file.txt", destination_path="/new/path/to/file.txt").
read_file:read_file: Access a file using a precise path with directories and extensions specified. Example: 'read_file(file_path='Projects/Code/main.py')'. Ensure paths are exact and check file existence. Tool can be invoked multiple times to verify file system state.
write_file:write_file: Save text to disk with these parameters: file_path (full path, required), text (content to write, required), append (true to add content to existing file, false to overwrite, default false). Use iteratively for file state validation.
list_directory:list_directory: Use to list all files and directories in a specified folder. Input: dir_path should be a valid directory path without file types or specific files. This tool is for listing only, not for filtering by file type. Invoke multiple times for validation.

copy_file: Duplicate a file to a specified path. Parameters: source_path (existing file path), destination_path (new file path). Ensure paths are valid and distinct, with no file type changes. Use the tool multiple times for validation.
file_delete: To delete a file, provide a valid absolute file path under 'file_path'. Ensure the file exists and the path is correct. Use the tool multiple times for updated file system validation.
Search for files using Unix shell patterns, where '*' matches any character sequence. Specify relative directory paths. Ensure patterns match desired filenames accurately. Use tool multiple times for comprehensive validation. Example: To find 'chapter' and 'draft' files in 'drafts', use dir_path: 'drafts', pattern: '*chapter*draft*'.
move_file: Move or rename files with valid paths and compatible types. Parameters: source_path (required, existing path), destination_path (required, new path). Avoid overwriting incompatible file types. Verify paths and file system state by invoking the tool multiple times.
read_file: Access and read files with a valid absolute file path. Supports text-based files like .txt, .pdf, .docx, and .pptx. Verify file existence and path correctness before invocation. Tool can be called multiple times for consistent file system validation. Avoid unsupported file types and ambiguous requests.
write_file: Write text to a file with parameters: file_path (required, valid path to a writable file type), text (required, content to write), append (optional, true to add content, false to overwrite). Ensure file format supports editing and verify file existence for appending. Can be invoked multiple times for state validation. Example: {'file_path':'/path/file.txt','text':'Hello','append':false}.
list_directory: Lists files and directories in a specified, valid directory path. Use absolute paths and ensure the directory exists. Verify paths before usage. The tool can be invoked multiple times for validation. Examples: {'dir_path': '/path/to/valid/directory'}

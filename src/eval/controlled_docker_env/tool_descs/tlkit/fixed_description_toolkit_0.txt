copy_file: Duplicate a file to a specified location with parameters: source_path (required): Existing file path; destination_path (required): New file path, ensuring matching file extensions. Invoke multiple times for filesystem validation. Avoid renaming to unrelated file types.
file_delete: Remove a file by providing an absolute file path. Ensure the path is valid and points to an existing file. Use precise and unambiguous paths to avoid errors. The tool can be invoked multiple times for validation. Example: {'file_path':'/path/to/file.txt'}.
file_search: Search for files in a directory matching a Unix shell glob pattern. Use relative paths and shell-style patterns like '*.txt'. Avoid regex. Repeat invocations for complex queries. E.g., {'dir_path':'Documents', 'pattern':'*.pdf'}.
move_file: Relocate or rename a file by specifying existing paths. Both source and destination must be complete, valid paths, not directories, and maintain the same filename. Use multiple invocations to verify paths.
read_file: Access files by providing an absolute file path with the correct file name and extension. Ensure paths are valid and accessible before use. This tool may be invoked multiple times for consistency checks.
write_file: Writes text to a disk file. Parameters: file_path (required, valid text files only), text (required), append (optional, true/false). Check file type and existence before writing. Supports multiple invocations for file system validation.
list_directory: Accurately list files and directories in a specified folder. Use valid, absolute directory paths for 'dir_path'. Avoid file-specific queries or unsupported operations. Confirm the directory exists and is accessible. Examples: {'dir_path':'/absolute/path/to/directory'}.

copy_file: Duplicate a file by providing valid, absolute paths for both source and destination. Ensure file types match and paths exist. Specify both parameters clearly. The tool can be invoked multiple times to ensure file system consistency.
file_delete: Deletes a file using full, correct file paths only. Include directories and extensions. Validate paths before use. Tool can be called multiple times to confirm file system updates. Example: {'file_path':'/path/to/file.txt'}
Use this tool to recursively find files in a directory using valid Unix regex patterns. Avoid shell wildcards like '*'. Validate patterns and input directory paths before running. If unsure, test in segments. For instance, use '^file_.*\.docx$' for files starting with 'file_' and ending with '.docx'.
move_file: Move or rename files with valid paths and consistent extensions. Use source_path to specify the current file location and destination_path for the new location or name. Validate paths and extensions before using the tool. Invoke multiple times for system state checks.
read_file: Reads the content of a file from disk using a valid file path. Only provides file content; does not analyze or extract metadata. Ensure the file exists at the specified path. For advanced operations, combine with other tools. Can be invoked multiple times for file system state validation.
write_file: Save text to disk. Parameters: file_path (required, valid path to a supported file type), text (required, content to write), append (true to add, false to overwrite). Validate file paths and ensure files exist where necessary. Invoke multiple times if needed to confirm file states.
list_directory: Lists files and directories within a specified absolute path. Usage requires a valid 'dir_path' without unencoded spaces or special characters. Paths must exist. Example: list_directory(dir_path="/path/to/folder"). Invoke multiple times for better validation.

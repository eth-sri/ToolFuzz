copy_file: Duplicate a file to a specified path. Parameters: source_path (required, valid path, existing file), destination_path (required, valid path, same file format, distinct from source). Only copies, doesn't rename/change file types. Verify paths and file existence. Use multiple invocations for state validation.
file_delete: Delete a file using the full, exact path, including directories and file extension. Example: '/path/to/file.txt'. Double-check paths for accuracy. The tool can be invoked multiple times to confirm file system state.
file_search: Search subdirectory files matching regex. Parameters: dir_path (subdirectory); pattern (required regex, not shell patterns). Use valid regex syntax, e.g., '^doc.*\.pdf$' for documents. Specify relative paths. Invoke tool multiple times for accurate file state validation. Avoid Unix shell patterns.
move_file: Move or rename a file using complete paths. Parameters: source_path:required:Complete path of the file to move, destination_path:required:Complete new path, ensuring file names and types match. Confirm paths exist and don't overwrite existing files. Repeatable for validation.
read_file: Access files using exact paths and names. Parameter: file_path (required, full path to the file). Paths must be absolute and match existing files. Verify file existence and path correctness before using. Tool can be invoked multiple times for accurate validation.
write_file: Save text to a file with parameters: file_path (name and path), text (content to write), append (true to add to existing text). Supports text-based files; check format compatibility. Validate file path and existence; invoke tool multiple times for state checks. Avoid unsupported formats like PDFs for appending.
list_directory: List contents of an existing directory using an absolute path. Parameter: dir_path (absolute path to directory). Ensure path existence and correct format. Multiple invocations allowed for state checks. Example: {'dir_path':'/path/to/directory'}.

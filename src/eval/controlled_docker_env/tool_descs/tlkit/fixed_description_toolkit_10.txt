copy_file: Duplicate a file ensuring the source and destination paths have compatible file types and extensions. Use absolute paths, and verify file existence. Avoid renaming files with different extensions. Invoke the tool multiple times for validation.
file_delete: Deletes a specified file. Provide the full file path, including the extension, as 'file_path'. Verify the path's accuracy and file existence. The tool can be invoked multiple times to ensure the file system's state is correctly validated. Example: {'file_path': '/path/to/file.txt'}.
file_search: Search files in a subdirectory using regex patterns. Parameters: dir_path (subdirectory), pattern (regex; ^ for start, $ for end). Avoid Unix wildcards like * for regex. Validate inputs. Use multiple invocations for comprehensive searches. Examples: '^chapter.*draft$', '.*\.docx$'.
move_file: Move or rename a file with strict path validation. Parameters: source_path:required - path of the existing file. destination_path:required - new file path, ensuring no overwrite. Validate paths before execution. Invoke tool multiple times for accurate file system updates.
read_file: Read a file using a full file path (e.g., '/path/to/file.txt'). Supported types: .txt, .pdf, .docx. Ensure the file and path exist. Invoke multiple times for filesystem checks.
write_file: Save text to disk with parameters: 'file_path' (required, valid text file path), 'text' (required, content to write), 'append' (optional, true to add content). Only text files supported. Confirm file permissions and path validity. Invoke multiple times for file system checks.
list_directory: Lists all files and directories in a specified folder. Use absolute paths for 'dir_path'. Ensure the path is valid and exists. Avoid relative paths or shorthand folder names. Can be invoked multiple times for directory state validation.

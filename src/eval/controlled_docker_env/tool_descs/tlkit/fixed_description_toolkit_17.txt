copy_file: Duplicate a file to a specified location. Parameters: source_path:required - Path of the file to copy; destination_path:required - Path, including filename and extension, to save the copy. Ensure file extensions match. Invoke multiple times for validation.
file_delete: Deletes a specified file. Provide the absolute path, including filename and extension (e.g., '/path/to/file.txt'). Verify the path's accuracy before deletion. Use the tool multiple times for validation. Example: {'file_path':'/local/path/to/file.docx'}.
file_search: Recursively search for files in a subdirectory matching a regex pattern. Use valid regex, not shell globbing (* is any sequence, . is any character, etc.). Parameters: dir_path (subdirectory), pattern (regex pattern). Confirm directory path and test regex separately for accuracy before full use. Invoke the tool multiple times for better validation. Example: Search 'Documents' for files starting with 'report' and ending '.pdf': dir_path='Documents', pattern='^report.*\.pdf$'.
move_file: Move or rename a file by providing full, valid source and destination paths. Ensure paths exist and file types match. Invoke tool multiple times for file system validation. Example: move_file(source_path='/path/to/source.txt', destination_path='/path/to/destination.txt').
read_file: Access content from disk. Parameters: file_path (required, must be a full path to a supported file type: .txt, .pdf, .docx). Validate path and file type before use. Use tool multiple times to check file system state. Examples: 'read_file(file_path="/path/to/document.pdf")'.
write_file: Writes text to a file with parameters: file_path (text format, path must exist), text (content to write), append (true/false). Supports writable text formats only. Validate file path and directory existence. Use multiple invocations for system state checks.
list_directory: Accurately list files and directories in a specified absolute folder path. Input must be a valid, existing path starting from the root (e.g., '/home/user/documents'). Avoid relative paths or incorrect formats. Invoke multiple times to verify file system status.

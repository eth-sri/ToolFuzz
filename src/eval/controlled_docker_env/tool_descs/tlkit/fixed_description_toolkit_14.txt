copy_file: Duplicate a file with matching source and destination file types. Ensure the destination path does not already contain a file. Validate paths and filenames for accuracy. The tool can be invoked multiple times to check the file system state. Parameters: source_path (required), destination_path (required).
file_delete: Delete a file using an absolute path. Ensure 'file_path' is specified as an absolute path, including directories and filename. Relative paths and informal names are not supported. Verify file existence before requesting deletion. Tool can be invoked multiple times to confirm file system changes. Examples: '/path/to/file.txt', '/usr/local/bin/script.sh'.
file_search: Locate files in a subdirectory using Unix-style patterns (*, ?, []). Parameters: dir_path: Subdirectory to search. pattern: Required pattern. Avoid complex regex. Use multiple tool invocations to validate filesystem state. Examples: '*.docx', 'report_??.txt'.
move_file: Move or rename files using valid, distinct paths. Ensure 'source_path' and 'destination_path' specify full paths with filenames. Check paths exist and are not identical. For validation, invoke tool multiple times to confirm file system state.
read_file: Read a text file from disk with a valid, existing file path. Only supports readable text files. Verify file paths and file types before use. The tool can be invoked multiple times to ensure the file exists and is accessible.
write_file: Save text to disk with parameters: file_path (required, only .txt allowed), text (required), append (true to add, false to overwrite). Validate file path existence and format before execution. Use tool multiple times to verify file system state.
list_directory: List all files and directories at the top level of a specified folder. Parameters: dir_path - Absolute or relative path to the target directory. Only lists names without content filtering. For comprehensive checks, invoke multiple times.

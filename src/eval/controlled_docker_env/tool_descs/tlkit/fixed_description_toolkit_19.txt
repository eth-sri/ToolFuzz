copy_file: Duplicate a file to a specified path. Parameters: source_path (required): Valid path of the file to copy. destination_path (required): Valid path for saving the copy. Ensure file formats match and paths are valid. Use absolute paths. Invoke multiple times for system state checks. Example: Copy 'source.txt' to 'destination.txt'.
file_delete: Remove a file using an absolute path. Ensure 'file_path' is complete and valid. Validate paths before deletion. Use absolute paths like '/path/to/your/file.txt'. Can be invoked multiple times to verify file system state.
file_search: Search for files in a directory using simple Unix shell patterns. Use concise patterns like '*.docx' or '^chapter_.*draft.*'. Provide clear directory paths. Validate inputs and run multiple times for accurate file system state checking.
move_file: Move or rename a file by specifying a complete source file path and a destination directory path. Ensure paths are valid and accessible. Destination must be a directory, not a file. Validate paths before and after operations, using the tool multiple times if needed. Examples: {'source_path':'/path/to/source.txt', 'destination_path':'/path/to/destination/'}
read_file: Access a file from disk using an absolute path. Parameters: file_path (required, string) - must be a valid, existing file path. Ensure proper file permissions. Use for reading text or extracting content. Invoke multiple times for comprehensive file system validation.
write_file: Save text to a specified file path. Parameters: file_path (required, string), text (required, string), append (required, boolean). Supported formats: .txt, .docx. Ensure file path validity. Use append to control overwriting. Invoke multiple times for file system checks.
list_directory: Lists contents of a specified directory. Ensure 'dir_path' is a valid, absolute path. Avoid relative paths or vague queries. Validate paths before use. This tool can be invoked multiple times to check directory states. Example: {'dir_path': '/absolute/path/to/directory'}.

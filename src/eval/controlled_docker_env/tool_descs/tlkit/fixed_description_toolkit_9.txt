copy_file: Duplicates a file to a specified location. Use full file paths with correct extensions. Ensure source and destination file types match. Validate paths before execution. Invoke multiple times to verify file system state. Parameters: source_path:required:Full path of the file to copy; destination_path:required:Full path to save the copied file.
file_delete: Delete a file by providing a valid, absolute file path. Ensure the path points to an existing file. Avoid using file descriptions or relative paths. Validate paths and confirm file existence before proceeding.
file_search: Locate files in a subdirectory using Unix shell-style patterns. Parameters: dir_path (relative path to subdirectory), pattern (simple pattern, '*' matches any sequence). Avoid complex regex; ensure patterns are shell-compatible. Use relative paths. Invoke the tool multiple times for comprehensive searches. Examples: {'dir_path':'Case_Laws','pattern':'court*'}.
move_file: Move or rename a file with strict validation. Ensure source and destination paths are valid and distinct, maintaining the same file type. Avoid overwriting existing files without confirmation. Example: move_file('/path/source.pdf', '/path/destination.pdf').
read_file: Access a file using an absolute file path to supported types (.txt, .pdf, .docx). Provide the full path as 'file_path'. Validate paths exist before use. Tool can be invoked multiple times for accurate file system state validation.
write_file: Save text to a valid, accessible file path. Parameters: file_path (required, valid .txt path), text (required), append (optional, for .txt files only). Use supported types and check file paths. Retry if the file system state changes.
list_directory: List files and directories in a specified folder. Parameters: dir_path (absolute path to a subdirectory). Ensure the path exists and is correctly formatted. This tool can be invoked multiple times for validating the file system state.

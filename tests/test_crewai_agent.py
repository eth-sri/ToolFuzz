import unittest
from unittest.mock import patch

from crewai.agents.crew_agent_executor import ToolResult
from crewai.agents.parser import AgentAction, AgentFinish
from crewai.crews import CrewOutput
from crewai.tasks import TaskOutput, OutputFormat
from crewai.types.usage_metrics import UsageMetrics
from crewai_tools.tools.file_read_tool.file_read_tool import FileReadTool
from crewai_tools.tools.serper_dev_tool.serper_dev_tool import SerperDevTool

from src.toolfuzz.agent_executors.agent_executor import AgentResponse
from src.toolfuzz.agent_executors.crewai.agent import CrewAIAgent

action_search_1 = AgentAction(
    thought='I need to gather information about Alan Turing to provide a clear and informative response.',
    tool='Search the internet with Serper',
    tool_input='{"search_query": "Who is Alan Turing?"}',
    text='I need to gather information about Alan Turing to provide a clear and informative response. \n\nAction: Search the internet with Serper  \nAction Input: {"search_query":"Who is Alan Turing?"}  \nObservation: \nI encountered an error while trying to use the tool. This was the error: \'SERPER_API_KEY\'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {\'search_query\': {\'description\': \'Mandatory search query you want to use to search the internet\', \'type\': \'str\'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: \'search\' (default), \'news\'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```'
)
action_search_1.result = "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"

action_search_2 = AgentAction(
    thought='Thought: I need to search for more detailed information about Alan Turing as I do not have sufficient information available to provide a complete answer.',
    tool='Search the internet with Serper',
    tool_input='{"search_query": "Alan Turing biography and contributions"}',
    text='Thought: I need to search for more detailed information about Alan Turing as I do not have sufficient information available to provide a complete answer.\n\nAction: Search the internet with Serper  \nAction Input: {"search_query":"Alan Turing biography and contributions"}  \nObservation: \nI encountered an error while trying to use the tool. This was the error: \'SERPER_API_KEY\'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {\'search_query\': {\'description\': \'Mandatory search query you want to use to search the internet\', \'type\': \'str\'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: \'search\' (default), \'news\'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```'
)
action_search_2.result = "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"

action_read = AgentAction(
    thought='I need to read the content of the setup.py file to check if "tqdm" is listed as a dependency.',
    tool='Read a file\'s content',
    tool_input='{"file_path": "./setup.py"}',
    text='I need to read the content of the setup.py file to check if "tqdm" is listed as a dependency.\n\nAction: Read a file\'s content\nAction Input: {"file_path": "./setup.py"}\nObservation: from setuptools import setup, find_packages\n\nsetup(\n    name=\'toolfuzz\',\n    version=\'0.1.0\',\n    package_dir={\'\': \'src\'},\n    packages=find_packages(where=\'src\'),\n    url=\'\',\n    license=\'MIT\',\n    author=\'Ivan Milev\',\n    author_email=\'imilev@ethz.ch\',\n    description=\'ToolFuzz - Automatic Agent Tool Testing\',\n    install_requires=[\n        \'langchain-openai==0.3.6\',\n        \'langgraph==0.2.74\',\n        \'langchain==0.3.19\',\n        \'langchain-core==0.3.37\',\n        \'faker\',\n        \'jinja2\',\n        \'tqdm\',\n    ]\n)\n',
)
action_read.result = "from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n"

messages = {
    'Search the internet with Serper': (
        CrewOutput(
            raw='Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.',
            pydantic=None, json_dict=None, tasks_output=[TaskOutput(description='Who is Alan Turing?', name=None,
                                                                    expected_output="A clear and informative response to the user's question.",
                                                                    summary='Who is Alan Turing?...',
                                                                    raw='Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.',
                                                                    pydantic=None, json_dict=None,
                                                                    agent='Conversational Assistant',
                                                                    output_format=OutputFormat.RAW)],
            token_usage=UsageMetrics(total_tokens=2400, prompt_tokens=1981, cached_prompt_tokens=0,
                                     completion_tokens=419, successful_requests=3)),
        [
            ToolResult(
                result="\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```",
                result_as_answer=False),
            action_search_1,
            ToolResult(
                result="\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```",
                result_as_answer=False),
            action_search_2,
            AgentFinish(thought='',
                        output='Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.',
                        text='Thought: I need to provide a definitive and comprehensive answer concerning Alan Turing without further external searches.\n\nFinal Answer: Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.')
        ]
    ),
    "Read a file's content": (
        CrewOutput(
            raw="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```",
            pydantic=None, json_dict=None, tasks_output=[TaskOutput(
                description='In the setup.py file we have listed the dependecies of the project, are we depending on tqdm?',
                name=None, expected_output="A clear and informative response to the user's question.",
                summary='In the setup.py file we have listed the dependecies of...',
                raw="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```",
                pydantic=None, json_dict=None, agent='Conversational Assistant', output_format=OutputFormat.RAW)],
            token_usage=UsageMetrics(total_tokens=1172, prompt_tokens=951, cached_prompt_tokens=0,
                                     completion_tokens=221,
                                     successful_requests=2)),
        [
            ToolResult(
                result="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n",
                result_as_answer=False),
            action_read,
            AgentFinish(thought='',
                        output="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```",
                        text="```\nThought: I now know the final answer\nFinal Answer: from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```")
        ]
    )
}


class MockedCrew:
    def __init__(self, tool, agent, **kwargs):
        self.tool = tool
        self.agent = agent

    def kickoff(self):
        crew_output, steps = messages[self.tool.name]
        self.agent.steps = steps
        return crew_output


class TestCrewAIAgent(unittest.TestCase):
    @patch('crewai.Agent')
    @patch('crewai.Task')
    @patch('crewai.Crew')
    def test_file_read_tool(self, crew_mock, task_mock, agent_mock):
        tool = FileReadTool()
        agent = CrewAIAgent(tool, 'gpt-4o-mini')
        crew_mock.return_value = MockedCrew(tool, agent)

        response = agent(
            'In the setup.py file we have listed the dependecies of the project, are we depending on tqdm?')

        self.assertEqual(AgentResponse(
            agent_response="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```",
            trace=[{'role': 'user',
                    'content': 'In the setup.py file we have listed the dependecies of the project, are we depending on tqdm?'},
                   {'role': 'assistant',
                    'content': "from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n"},
                   {'id': '',
                    'type': 'function',
                    'function': {'name': "Read a file's content",
                                 'arguments': '{"file_path": "./setup.py"}'}},
                   {'role': 'tool',
                    'tool_call_id': '',
                    'content': "from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n"},
                   {'role': 'assistant',
                    'content': "```\nThought: I now know the final answer\nFinal Answer: from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n```"}],
            is_tool_invoked=True,
            is_raised_exception=False,
            exception=None,
            tool_output="from setuptools import setup, find_packages\n\nsetup(\n    name='toolfuzz',\n    version='0.1.0',\n    package_dir={'': 'src'},\n    packages=find_packages(where='src'),\n    url='',\n    license='MIT',\n    author='Ivan Milev',\n    author_email='imilev@ethz.ch',\n    description='ToolFuzz - Automatic Agent Tool Testing',\n    install_requires=[\n        'langchain-openai==0.3.6',\n        'langgraph==0.2.74',\n        'langchain==0.3.19',\n        'langchain-core==0.3.37',\n        'faker',\n        'jinja2',\n        'tqdm',\n    ]\n)\n",
            tool_args='{"file_path": "./setup.py"}'), response)

    @patch('crewai.Agent')
    @patch('crewai.Task')
    @patch('crewai.Crew')
    def test_serper_dev_tool(self, crew_mock, task_mock, agent_mock):
        tool = SerperDevTool()
        agent = CrewAIAgent(tool, 'gpt-4o-mini')

        crew_mock.return_value = MockedCrew(tool, agent)

        response = agent('Who is Alan Turing?')

        self.assertEqual(
            AgentResponse(
                agent_response='Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.',
                trace=[{'role': 'user', 'content': 'Who is Alan Turing?'},
                       {'role': 'assistant',
                        'content': "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"},
                       {'id': '',
                        'type': 'function',
                        'function': {'name': 'Search the internet with Serper',
                                     'arguments': '{"search_query": "Who is Alan Turing?"}'}},
                       {'role': 'tool',
                        'tool_call_id': '',
                        'content': "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"},
                       {'role': 'assistant',
                        'content': "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"},
                       {'id': '',
                        'type': 'function',
                        'function': {'name': 'Search the internet with Serper',
                                     'arguments': '{"search_query": "Alan Turing biography and contributions"}'}},
                       {'role': 'tool',
                        'tool_call_id': '',
                        'content': "\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```"},
                       {'role': 'assistant',
                        'content': 'Thought: I need to provide a definitive and comprehensive answer concerning Alan Turing without further external searches.\n\nFinal Answer: Alan Turing was an English mathematician, logician, cryptanalyst, and computer scientist, widely considered to be the father of computer science and artificial intelligence. Born on June 23, 1912, Turing played a crucial role in breaking the German Enigma code during World War II, which significantly contributed to the Allied victory. His work at Bletchley Park, where he designed the Bombe machine to decode Enigma messages, was pivotal in the field of cryptography.\n\nIn addition to his contributions to cryptography, Turing formalized concepts related to algorithms and computation with his 1936 paper on the Turing machine, which is a foundational model of computation that helped to establish the limits of what can be computed. Turing also contributed to the development of the first electronic computers.\n\nDespite his monumental achievements, Turing\'s life was marred by personal tragedy and persecution due to his homosexuality, which was criminalized in the UK at the time. In 1952, he was convicted of "gross indecency" and underwent chemical castration as an alternative to imprisonment. Turing died on June 7, 1954, from cyanide poisoning in what is believed to have been a suicide.\n\nIn 2013, Turing was granted a posthumous royal pardon, and he is now celebrated as a key figure in computing and a symbol of the LGBTQ+ rights movement. His legacy continues to impact modern computing, artificial intelligence research, and the understanding of algorithms.'}],
                is_tool_invoked=True,
                is_raised_exception=True,
                exception=" 'SERPER_API_KEY'.",
                tool_output="\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```\n\nI encountered an error while trying to use the tool. This was the error: 'SERPER_API_KEY'.\n Tool Search the internet with Serper accepts these inputs: Tool Name: Search the internet with Serper\nTool Arguments: {'search_query': {'description': 'Mandatory search query you want to use to search the internet', 'type': 'str'}}\nTool Description: A tool that can be used to search the internet with a search_query. Supports different search types: 'search' (default), 'news'.\nMoving on then. I MUST either use a tool (use one at time) OR give my best final answer not both at the same time. When responding, I must use the following format:\n\n```\nThought: you should always think about what to do\nAction: the action to take, should be one of [Search the internet with Serper]\nAction Input: the input to the action, dictionary enclosed in curly braces\nObservation: the result of the action\n```\nThis Thought/Action/Action Input/Result can repeat N times. Once I know the final answer, I must return the following format:\n\n```\nThought: I now can give a great answer\nFinal Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\n\n```",
                tool_args='{"search_query": "Alan Turing biography and contributions"}'), response)
